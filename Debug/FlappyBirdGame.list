
FlappyBirdGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006464  08006464  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800646c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000080  080064ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080064ec  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001436a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273b  00000000  00000000  0003441a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00036b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00037c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268f5  00000000  00000000  00038cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151b8  00000000  00000000  0005f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5c79  00000000  00000000  0007479d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  0016a468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063bc 	.word	0x080063bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080063bc 	.word	0x080063bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <write_Lose>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// the function writes LOSE word on the LED screen
void write_Lose(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t L[8] = {0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7C};
 80005ca:	4a45      	ldr	r2, [pc, #276]	; (80006e0 <write_Lose+0x11c>)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t O[8] = {0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C};
 80005d8:	4a42      	ldr	r2, [pc, #264]	; (80006e4 <write_Lose+0x120>)
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t S[8] = {0x78,0x04,0x04,0x04,0x38,0x40,0x40,0x3C};
 80005e6:	4a40      	ldr	r2, [pc, #256]	; (80006e8 <write_Lose+0x124>)
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t E[8] = {0x7C,0x04,0x04,0x7C,0x04,0x04,0x04,0x7C};
 80005f4:	4a3d      	ldr	r2, [pc, #244]	; (80006ec <write_Lose+0x128>)
 80005f6:	463b      	mov	r3, r7
 80005f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fc:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i < 8; i++){
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
 8000604:	e064      	b.n	80006d0 <write_Lose+0x10c>
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the CS pin LOW
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	4838      	ldr	r0, [pc, #224]	; (80006f0 <write_Lose+0x12c>)
 800060e:	f002 facb 	bl	8002ba8 <HAL_GPIO_WritePin>
		buf[0] = 8 - i;
 8000612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f1c3 0308 	rsb	r3, r3, #8
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f887 3020 	strb.w	r3, [r7, #32]
		buf[1] = E[i];
 8000620:	463a      	mov	r2, r7
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2202      	movs	r2, #2
 8000632:	4619      	mov	r1, r3
 8000634:	482f      	ldr	r0, [pc, #188]	; (80006f4 <write_Lose+0x130>)
 8000636:	f003 fca3 	bl	8003f80 <HAL_SPI_Transmit_IT>

		buf[0] = 8 - i;
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f1c3 0308 	rsb	r3, r3, #8
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f887 3020 	strb.w	r3, [r7, #32]
		buf[1] = S[i];
 8000648:	f107 0208 	add.w	r2, r7, #8
 800064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2202      	movs	r2, #2
 800065c:	4619      	mov	r1, r3
 800065e:	4825      	ldr	r0, [pc, #148]	; (80006f4 <write_Lose+0x130>)
 8000660:	f003 fc8e 	bl	8003f80 <HAL_SPI_Transmit_IT>

		buf[0] = 8 - i;
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f1c3 0308 	rsb	r3, r3, #8
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f887 3020 	strb.w	r3, [r7, #32]
		buf[1] = O[i];
 8000672:	f107 0210 	add.w	r2, r7, #16
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	2202      	movs	r2, #2
 8000686:	4619      	mov	r1, r3
 8000688:	481a      	ldr	r0, [pc, #104]	; (80006f4 <write_Lose+0x130>)
 800068a:	f003 fc79 	bl	8003f80 <HAL_SPI_Transmit_IT>

		buf[0] = 8 - i;
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	b2db      	uxtb	r3, r3
 8000692:	f1c3 0308 	rsb	r3, r3, #8
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f887 3020 	strb.w	r3, [r7, #32]
		buf[1] = L[i];
 800069c:	f107 0218 	add.w	r2, r7, #24
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2202      	movs	r2, #2
 80006b0:	4619      	mov	r1, r3
 80006b2:	4810      	ldr	r0, [pc, #64]	; (80006f4 <write_Lose+0x130>)
 80006b4:	f003 fc64 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);  // pull the CS pin HIGH
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	480c      	ldr	r0, [pc, #48]	; (80006f0 <write_Lose+0x12c>)
 80006c0:	f002 fa72 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	; 0x64
 80006c6:	f001 f9b9 	bl	8001a3c <HAL_Delay>
	for(int i = 0; i < 8; i++){
 80006ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006cc:	3301      	adds	r3, #1
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	dd97      	ble.n	8000606 <write_Lose+0x42>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	; 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	080063d4 	.word	0x080063d4
 80006e4:	080063dc 	.word	0x080063dc
 80006e8:	080063e4 	.word	0x080063e4
 80006ec:	080063ec 	.word	0x080063ec
 80006f0:	40021400 	.word	0x40021400
 80006f4:	200000f4 	.word	0x200000f4

080006f8 <draw_bar>:

// the function draws obstacles
void draw_bar(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	for(int i = 1; i < 9; i++){
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e0a6      	b.n	8000852 <draw_bar+0x15a>
		buf[0] = i;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	713b      	strb	r3, [r7, #4]
		HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the CS pin LOW
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4854      	ldr	r0, [pc, #336]	; (8000864 <draw_bar+0x16c>)
 8000712:	f002 fa49 	bl	8002ba8 <HAL_GPIO_WritePin>
		for(int j = 4; j >= 1; j--){
 8000716:	2304      	movs	r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	e08d      	b.n	8000838 <draw_bar+0x140>
			// if the row not null
			if(map[j-1][i-1] != 0){
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3b01      	subs	r3, #1
 8000724:	4950      	ldr	r1, [pc, #320]	; (8000868 <draw_bar+0x170>)
 8000726:	00d2      	lsls	r2, r2, #3
 8000728:	440a      	add	r2, r1
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d06d      	beq.n	8000810 <draw_bar+0x118>
				// if we reach the end of the screen, move to the next
				if((map[j-1][i-1] & 0x01) != 0){
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1e5a      	subs	r2, r3, #1
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3b01      	subs	r3, #1
 800073c:	494a      	ldr	r1, [pc, #296]	; (8000868 <draw_bar+0x170>)
 800073e:	00d2      	lsls	r2, r2, #3
 8000740:	440a      	add	r2, r1
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d049      	beq.n	80007e4 <draw_bar+0xec>
					if(j == 1){
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d117      	bne.n	8000786 <draw_bar+0x8e>
						map[j-1][i-1] &= (~0x01);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3b01      	subs	r3, #1
 800075e:	4942      	ldr	r1, [pc, #264]	; (8000868 <draw_bar+0x170>)
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	440a      	add	r2, r1
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b2d9      	uxtb	r1, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3b01      	subs	r3, #1
 8000772:	f021 0101 	bic.w	r1, r1, #1
 8000776:	b2c8      	uxtb	r0, r1
 8000778:	493b      	ldr	r1, [pc, #236]	; (8000868 <draw_bar+0x170>)
 800077a:	00d2      	lsls	r2, r2, #3
 800077c:	440a      	add	r2, r1
 800077e:	4413      	add	r3, r2
 8000780:	4602      	mov	r2, r0
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	e044      	b.n	8000810 <draw_bar+0x118>
					}
					else{
						map[j-1][i-1] &= (~0x01);
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b01      	subs	r3, #1
 800078e:	4936      	ldr	r1, [pc, #216]	; (8000868 <draw_bar+0x170>)
 8000790:	00d2      	lsls	r2, r2, #3
 8000792:	440a      	add	r2, r1
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2d9      	uxtb	r1, r3
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	f021 0101 	bic.w	r1, r1, #1
 80007a6:	b2c8      	uxtb	r0, r1
 80007a8:	492f      	ldr	r1, [pc, #188]	; (8000868 <draw_bar+0x170>)
 80007aa:	00d2      	lsls	r2, r2, #3
 80007ac:	440a      	add	r2, r1
 80007ae:	4413      	add	r3, r2
 80007b0:	4602      	mov	r2, r0
 80007b2:	701a      	strb	r2, [r3, #0]
						map[j-2][i-1] |= 0x80;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1e9a      	subs	r2, r3, #2
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	492a      	ldr	r1, [pc, #168]	; (8000868 <draw_bar+0x170>)
 80007be:	00d2      	lsls	r2, r2, #3
 80007c0:	440a      	add	r2, r1
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b2d9      	uxtb	r1, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1e9a      	subs	r2, r3, #2
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80007d4:	b2c8      	uxtb	r0, r1
 80007d6:	4924      	ldr	r1, [pc, #144]	; (8000868 <draw_bar+0x170>)
 80007d8:	00d2      	lsls	r2, r2, #3
 80007da:	440a      	add	r2, r1
 80007dc:	4413      	add	r3, r2
 80007de:	4602      	mov	r2, r0
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e015      	b.n	8000810 <draw_bar+0x118>
					}
				}
				else{
					// move obstacles
					uint8_t temp = map[j-1][i-1] >> 1;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	1e5a      	subs	r2, r3, #1
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	491e      	ldr	r1, [pc, #120]	; (8000868 <draw_bar+0x170>)
 80007ee:	00d2      	lsls	r2, r2, #3
 80007f0:	440a      	add	r2, r1
 80007f2:	4413      	add	r3, r2
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	71fb      	strb	r3, [r7, #7]
					map[j-1][i-1] = temp;
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3b01      	subs	r3, #1
 8000804:	4918      	ldr	r1, [pc, #96]	; (8000868 <draw_bar+0x170>)
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	440a      	add	r2, r1
 800080a:	4413      	add	r3, r2
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	701a      	strb	r2, [r3, #0]
				}
			}
			buf[1] = map[j-1][i-1];
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3b01      	subs	r3, #1
 8000818:	4913      	ldr	r1, [pc, #76]	; (8000868 <draw_bar+0x170>)
 800081a:	00d2      	lsls	r2, r2, #3
 800081c:	440a      	add	r2, r1
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	717b      	strb	r3, [r7, #5]
			HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2202      	movs	r2, #2
 800082a:	4619      	mov	r1, r3
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <draw_bar+0x174>)
 800082e:	f003 fba7 	bl	8003f80 <HAL_SPI_Transmit_IT>
		for(int j = 4; j >= 1; j--){
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3b01      	subs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f73f af6e 	bgt.w	800071c <draw_bar+0x24>
		}
		HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);  // pull the CS pin HIGH
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <draw_bar+0x16c>)
 8000848:	f002 f9ae 	bl	8002ba8 <HAL_GPIO_WritePin>
	for(int i = 1; i < 9; i++){
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b08      	cmp	r3, #8
 8000856:	f77f af55 	ble.w	8000704 <draw_bar+0xc>
	}
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021400 	.word	0x40021400
 8000868:	20000228 	.word	0x20000228
 800086c:	200000f4 	.word	0x200000f4

08000870 <check_collision>:

// the function checks collisions between bird and environment
void check_collision(){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
	// the bird fell to the ground
	if((position.y - 1) < OP_DIGIT0)
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <check_collision+0xc4>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d802      	bhi.n	8000884 <check_collision+0x14>
		isPlaying = 0;
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <check_collision+0xc8>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]

	// we are on the top
	if((position.y + 1) > OP_DIGIT7)
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <check_collision+0xc4>)
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	2b07      	cmp	r3, #7
 800088a:	d905      	bls.n	8000898 <check_collision+0x28>
		position.y -= 1;
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <check_collision+0xc4>)
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	3b01      	subs	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <check_collision+0xc4>)
 8000896:	705a      	strb	r2, [r3, #1]

	// we have finally reached the screen, start from the beginning
	if(position.x + 1 >= 32)
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <check_collision+0xc4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b1e      	cmp	r3, #30
 800089e:	d902      	bls.n	80008a6 <check_collision+0x36>
		position.x = 0;
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <check_collision+0xc4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]

	// checking the collisions between bird and obstacles
	uint8_t screen = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
	if (position.x + 1  < 8)
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <check_collision+0xc4>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d802      	bhi.n	80008b8 <check_collision+0x48>
		screen = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e017      	b.n	80008e8 <check_collision+0x78>
	else if((position.x + 1) >= 8 && (position.x + 1) < 16)
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <check_collision+0xc4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b06      	cmp	r3, #6
 80008be:	d906      	bls.n	80008ce <check_collision+0x5e>
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <check_collision+0xc4>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b0e      	cmp	r3, #14
 80008c6:	d802      	bhi.n	80008ce <check_collision+0x5e>
		screen = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	e00c      	b.n	80008e8 <check_collision+0x78>
	else if((position.x + 1) >= 16 && (position.x + 1)< 24)
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <check_collision+0xc4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b0e      	cmp	r3, #14
 80008d4:	d906      	bls.n	80008e4 <check_collision+0x74>
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <check_collision+0xc4>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b16      	cmp	r3, #22
 80008dc:	d802      	bhi.n	80008e4 <check_collision+0x74>
		screen = 3;
 80008de:	2303      	movs	r3, #3
 80008e0:	71fb      	strb	r3, [r7, #7]
 80008e2:	e001      	b.n	80008e8 <check_collision+0x78>
	else
		screen = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	71fb      	strb	r3, [r7, #7]

	uint8_t dot = map[screen-1][position.y];
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <check_collision+0xc4>)
 80008ee:	7852      	ldrb	r2, [r2, #1]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <check_collision+0xcc>)
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	4413      	add	r3, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	71bb      	strb	r3, [r7, #6]
	dot &= cell[(position.x + 1)%8];
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <check_collision+0xc4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	425a      	negs	r2, r3
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	f002 0207 	and.w	r2, r2, #7
 800090e:	bf58      	it	pl
 8000910:	4253      	negpl	r3, r2
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <check_collision+0xd0>)
 8000914:	5cd2      	ldrb	r2, [r2, r3]
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	4013      	ands	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
	if (dot != 0){
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <check_collision+0xb8>
		isPlaying = 0;
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <check_collision+0xc8>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
	}
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	20000004 	.word	0x20000004
 8000938:	20000000 	.word	0x20000000
 800093c:	20000228 	.word	0x20000228
 8000940:	20000008 	.word	0x20000008

08000944 <draw_cell>:

// the function draws our bird
void draw_cell (uint8_t x, uint8_t y) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
	if(x > 31 || x < 0)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b1f      	cmp	r3, #31
 8000958:	d878      	bhi.n	8000a4c <draw_cell+0x108>
		return;
	if(y > 8 || y < 1)
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	2b08      	cmp	r3, #8
 800095e:	d877      	bhi.n	8000a50 <draw_cell+0x10c>
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d074      	beq.n	8000a50 <draw_cell+0x10c>
		return;

	uint8_t screen = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	75fb      	strb	r3, [r7, #23]
	uint8_t dot = cell[x%8];
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	4a39      	ldr	r2, [pc, #228]	; (8000a58 <draw_cell+0x114>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	75bb      	strb	r3, [r7, #22]

	if (x < 8)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d802      	bhi.n	8000982 <draw_cell+0x3e>
		screen = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	75fb      	strb	r3, [r7, #23]
 8000980:	e013      	b.n	80009aa <draw_cell+0x66>
	else if(x >= 8 && x < 16)
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	2b07      	cmp	r3, #7
 8000986:	d905      	bls.n	8000994 <draw_cell+0x50>
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d802      	bhi.n	8000994 <draw_cell+0x50>
		screen = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	75fb      	strb	r3, [r7, #23]
 8000992:	e00a      	b.n	80009aa <draw_cell+0x66>
	else if(x >= 16 && x < 24)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	d905      	bls.n	80009a6 <draw_cell+0x62>
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b17      	cmp	r3, #23
 800099e:	d802      	bhi.n	80009a6 <draw_cell+0x62>
		screen = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	75fb      	strb	r3, [r7, #23]
 80009a4:	e001      	b.n	80009aa <draw_cell+0x66>
	else
		screen = 4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	75fb      	strb	r3, [r7, #23]

	uint8_t buf[2];
	buf[0] = y;
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the CS pin LOW
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b4:	4829      	ldr	r0, [pc, #164]	; (8000a5c <draw_cell+0x118>)
 80009b6:	f002 f8f7 	bl	8002ba8 <HAL_GPIO_WritePin>
	for(int i = 4; i >= 1; i--){
 80009ba:	2304      	movs	r3, #4
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	e03b      	b.n	8000a38 <draw_cell+0xf4>
		buf[1] = map[i-1][y-1];
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	1e5a      	subs	r2, r3, #1
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	4925      	ldr	r1, [pc, #148]	; (8000a60 <draw_cell+0x11c>)
 80009ca:	00d2      	lsls	r2, r2, #3
 80009cc:	440a      	add	r2, r1
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	737b      	strb	r3, [r7, #13]
		if(i == screen){
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d122      	bne.n	8000a24 <draw_cell+0xe0>
			if(map[i-1][y-1] != 0x00){
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	491e      	ldr	r1, [pc, #120]	; (8000a60 <draw_cell+0x11c>)
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	440a      	add	r2, r1
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d014      	beq.n	8000a20 <draw_cell+0xdc>
				dot = map[i-1][y-1];
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	4918      	ldr	r1, [pc, #96]	; (8000a60 <draw_cell+0x11c>)
 8000a00:	00d2      	lsls	r2, r2, #3
 8000a02:	440a      	add	r2, r1
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	75bb      	strb	r3, [r7, #22]
				dot |= cell[x%8];
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 0307 	and.w	r3, r3, #7
 8000a10:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <draw_cell+0x114>)
 8000a12:	5cd2      	ldrb	r2, [r2, r3]
 8000a14:	7dbb      	ldrb	r3, [r7, #22]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	75bb      	strb	r3, [r7, #22]
				buf[1] = dot;
 8000a1a:	7dbb      	ldrb	r3, [r7, #22]
 8000a1c:	737b      	strb	r3, [r7, #13]
 8000a1e:	e001      	b.n	8000a24 <draw_cell+0xe0>
			}
			else
				buf[1] = dot;
 8000a20:	7dbb      	ldrb	r3, [r7, #22]
 8000a22:	737b      	strb	r3, [r7, #13]
		}
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <draw_cell+0x120>)
 8000a2e:	f003 faa7 	bl	8003f80 <HAL_SPI_Transmit_IT>
	for(int i = 4; i >= 1; i--){
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	dcc0      	bgt.n	80009c0 <draw_cell+0x7c>
	}
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);  // pull the CS pin HIGH
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <draw_cell+0x118>)
 8000a46:	f002 f8af 	bl	8002ba8 <HAL_GPIO_WritePin>
 8000a4a:	e002      	b.n	8000a52 <draw_cell+0x10e>
		return;
 8000a4c:	bf00      	nop
 8000a4e:	e000      	b.n	8000a52 <draw_cell+0x10e>
		return;
 8000a50:	bf00      	nop
}
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	40021400 	.word	0x40021400
 8000a60:	20000228 	.word	0x20000228
 8000a64:	200000f4 	.word	0x200000f4

08000a68 <clear_cell>:

// the function clears bird's old position
void clear_cell (uint8_t x, uint8_t y){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	4613      	mov	r3, r2
 8000a76:	71bb      	strb	r3, [r7, #6]
	if(x > 31 || x < 0)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b1f      	cmp	r3, #31
 8000a7c:	d879      	bhi.n	8000b72 <clear_cell+0x10a>
		return;
	if(y > 8 || y < 1)
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	d878      	bhi.n	8000b76 <clear_cell+0x10e>
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d075      	beq.n	8000b76 <clear_cell+0x10e>
		return;

	uint8_t screen = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	75fb      	strb	r3, [r7, #23]
	uint8_t dot = 0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]

	if (x < 8)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d802      	bhi.n	8000a9e <clear_cell+0x36>
		screen = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	75fb      	strb	r3, [r7, #23]
 8000a9c:	e013      	b.n	8000ac6 <clear_cell+0x5e>
	else if(x >= 8 && x < 16)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d905      	bls.n	8000ab0 <clear_cell+0x48>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d802      	bhi.n	8000ab0 <clear_cell+0x48>
		screen = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	75fb      	strb	r3, [r7, #23]
 8000aae:	e00a      	b.n	8000ac6 <clear_cell+0x5e>
	else if(x >= 16 && x < 24)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	d905      	bls.n	8000ac2 <clear_cell+0x5a>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b17      	cmp	r3, #23
 8000aba:	d802      	bhi.n	8000ac2 <clear_cell+0x5a>
		screen = 3;
 8000abc:	2303      	movs	r3, #3
 8000abe:	75fb      	strb	r3, [r7, #23]
 8000ac0:	e001      	b.n	8000ac6 <clear_cell+0x5e>
	else
		screen = 4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	75fb      	strb	r3, [r7, #23]

	uint8_t buf[2];
	buf[0] = y;
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the CS pin LOW
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <clear_cell+0x118>)
 8000ad2:	f002 f869 	bl	8002ba8 <HAL_GPIO_WritePin>
	for(int i = 4; i >= 1; i--){
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	e040      	b.n	8000b5e <clear_cell+0xf6>
		buf[1] = map[i-1][y-1];
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	4927      	ldr	r1, [pc, #156]	; (8000b84 <clear_cell+0x11c>)
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	440a      	add	r2, r1
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	737b      	strb	r3, [r7, #13]
		if(i == screen){
 8000af2:	7dfb      	ldrb	r3, [r7, #23]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d127      	bne.n	8000b4a <clear_cell+0xe2>
			if(map[i-1][y-1] != 0x00){
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4920      	ldr	r1, [pc, #128]	; (8000b84 <clear_cell+0x11c>)
 8000b04:	00d2      	lsls	r2, r2, #3
 8000b06:	440a      	add	r2, r1
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d019      	beq.n	8000b46 <clear_cell+0xde>
				dot = map[i-1][y-1];
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	79bb      	ldrb	r3, [r7, #6]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	491a      	ldr	r1, [pc, #104]	; (8000b84 <clear_cell+0x11c>)
 8000b1c:	00d2      	lsls	r2, r2, #3
 8000b1e:	440a      	add	r2, r1
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	73fb      	strb	r3, [r7, #15]
				dot &= (~cell[x%8]);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	4a16      	ldr	r2, [pc, #88]	; (8000b88 <clear_cell+0x120>)
 8000b2e:	5cd3      	ldrb	r3, [r2, r3]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	b25a      	sxtb	r2, r3
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	73fb      	strb	r3, [r7, #15]
				buf[1] = dot;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	737b      	strb	r3, [r7, #13]
 8000b44:	e001      	b.n	8000b4a <clear_cell+0xe2>
			}
			else
				buf[1] = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	737b      	strb	r3, [r7, #13]
		}
		HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4619      	mov	r1, r3
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <clear_cell+0x124>)
 8000b54:	f003 fa14 	bl	8003f80 <HAL_SPI_Transmit_IT>
	for(int i = 4; i >= 1; i--){
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dcbb      	bgt.n	8000adc <clear_cell+0x74>
	}
	HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);  // pull the CS pin HIGH
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <clear_cell+0x118>)
 8000b6c:	f002 f81c 	bl	8002ba8 <HAL_GPIO_WritePin>
 8000b70:	e002      	b.n	8000b78 <clear_cell+0x110>
		return;
 8000b72:	bf00      	nop
 8000b74:	e000      	b.n	8000b78 <clear_cell+0x110>
		return;
 8000b76:	bf00      	nop
}
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021400 	.word	0x40021400
 8000b84:	20000228 	.word	0x20000228
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200000f4 	.word	0x200000f4

08000b90 <clear_all>:

// the function clears whole screen
void clear_all(){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	for(int i = 1; i < 9; i++){
 8000b96:	2301      	movs	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e02c      	b.n	8000bf6 <clear_all+0x66>
		buf[0] = i;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	713b      	strb	r3, [r7, #4]
		buf[1] = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	717b      	strb	r3, [r7, #5]
		HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);  // pull the CS pin LOW
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bac:	4816      	ldr	r0, [pc, #88]	; (8000c08 <clear_all+0x78>)
 8000bae:	f001 fffb 	bl	8002ba8 <HAL_GPIO_WritePin>
		for(int j = 4; j >= 1; j--){
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e012      	b.n	8000bde <clear_all+0x4e>
			HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4813      	ldr	r0, [pc, #76]	; (8000c0c <clear_all+0x7c>)
 8000bc0:	f003 f9de 	bl	8003f80 <HAL_SPI_Transmit_IT>
			map[j-1][i-1] = 0x00;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	4910      	ldr	r1, [pc, #64]	; (8000c10 <clear_all+0x80>)
 8000bce:	00d2      	lsls	r2, r2, #3
 8000bd0:	440a      	add	r2, r1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
		for(int j = 4; j >= 1; j--){
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dce9      	bgt.n	8000bb8 <clear_all+0x28>
		}
		HAL_GPIO_WritePin (GPIOF, GPIO_PIN_12, GPIO_PIN_SET);  // pull the CS pin HIGH
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <clear_all+0x78>)
 8000bec:	f001 ffdc 	bl	8002ba8 <HAL_GPIO_WritePin>
	for(int i = 1; i < 9; i++){
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	ddcf      	ble.n	8000b9c <clear_all+0xc>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021400 	.word	0x40021400
 8000c0c:	200000f4 	.word	0x200000f4
 8000c10:	20000228 	.word	0x20000228

08000c14 <move>:

// the draws bird's next position depending on ADC data
void move(uint16_t x_raw, uint16_t y_raw){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80bb      	strh	r3, [r7, #4]
	// parsing raw data
	if(x_raw < 1000 && y_raw < 1000){
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2a:	d22a      	bcs.n	8000c82 <move+0x6e>
 8000c2c:	88bb      	ldrh	r3, [r7, #4]
 8000c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c32:	d226      	bcs.n	8000c82 <move+0x6e>
		snprintf(trans_str, 63, "down\n\r");
 8000c34:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <move+0x124>)
 8000c36:	213f      	movs	r1, #63	; 0x3f
 8000c38:	4840      	ldr	r0, [pc, #256]	; (8000d3c <move+0x128>)
 8000c3a:	f004 ff3d 	bl	8005ab8 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000c3e:	483f      	ldr	r0, [pc, #252]	; (8000d3c <move+0x128>)
 8000c40:	f7ff fae6 	bl	8000210 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	493b      	ldr	r1, [pc, #236]	; (8000d3c <move+0x128>)
 8000c4e:	483c      	ldr	r0, [pc, #240]	; (8000d40 <move+0x12c>)
 8000c50:	f004 fa6e 	bl	8005130 <HAL_UART_Transmit>
		check_collision();
 8000c54:	f7ff fe0c 	bl	8000870 <check_collision>
		position.x += 1;
 8000c58:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <move+0x130>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <move+0x130>)
 8000c62:	701a      	strb	r2, [r3, #0]
		position.y -= 1;
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <move+0x130>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <move+0x130>)
 8000c6e:	705a      	strb	r2, [r3, #1]
		draw_cell(position.x, position.y);
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <move+0x130>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <move+0x130>)
 8000c76:	7852      	ldrb	r2, [r2, #1]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fe62 	bl	8000944 <draw_cell>
	if(x_raw < 1000 && y_raw < 1000){
 8000c80:	e055      	b.n	8000d2e <move+0x11a>
	}
	else if(x_raw > 4000 && y_raw > 4000){
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c88:	d92a      	bls.n	8000ce0 <move+0xcc>
 8000c8a:	88bb      	ldrh	r3, [r7, #4]
 8000c8c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c90:	d926      	bls.n	8000ce0 <move+0xcc>
		snprintf(trans_str, 63, "up\n\r");
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <move+0x134>)
 8000c94:	213f      	movs	r1, #63	; 0x3f
 8000c96:	4829      	ldr	r0, [pc, #164]	; (8000d3c <move+0x128>)
 8000c98:	f004 ff0e 	bl	8005ab8 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000c9c:	4827      	ldr	r0, [pc, #156]	; (8000d3c <move+0x128>)
 8000c9e:	f7ff fab7 	bl	8000210 <strlen>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	4924      	ldr	r1, [pc, #144]	; (8000d3c <move+0x128>)
 8000cac:	4824      	ldr	r0, [pc, #144]	; (8000d40 <move+0x12c>)
 8000cae:	f004 fa3f 	bl	8005130 <HAL_UART_Transmit>
		check_collision();
 8000cb2:	f7ff fddd 	bl	8000870 <check_collision>
		position.x += 1;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <move+0x130>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <move+0x130>)
 8000cc0:	701a      	strb	r2, [r3, #0]
		position.y += 1;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <move+0x130>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <move+0x130>)
 8000ccc:	705a      	strb	r2, [r3, #1]
		draw_cell(position.x, position.y);
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <move+0x130>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4a1c      	ldr	r2, [pc, #112]	; (8000d44 <move+0x130>)
 8000cd4:	7852      	ldrb	r2, [r2, #1]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe33 	bl	8000944 <draw_cell>
	else if(x_raw > 4000 && y_raw > 4000){
 8000cde:	e026      	b.n	8000d2e <move+0x11a>
	}
	else{
		snprintf(trans_str, 63, "falling\n\r");
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <move+0x138>)
 8000ce2:	213f      	movs	r1, #63	; 0x3f
 8000ce4:	4815      	ldr	r0, [pc, #84]	; (8000d3c <move+0x128>)
 8000ce6:	f004 fee7 	bl	8005ab8 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000cea:	4814      	ldr	r0, [pc, #80]	; (8000d3c <move+0x128>)
 8000cec:	f7ff fa90 	bl	8000210 <strlen>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf8:	4910      	ldr	r1, [pc, #64]	; (8000d3c <move+0x128>)
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <move+0x12c>)
 8000cfc:	f004 fa18 	bl	8005130 <HAL_UART_Transmit>
		check_collision();
 8000d00:	f7ff fdb6 	bl	8000870 <check_collision>
		position.x += 1;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <move+0x130>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <move+0x130>)
 8000d0e:	701a      	strb	r2, [r3, #0]
		position.y -= 1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <move+0x130>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <move+0x130>)
 8000d1a:	705a      	strb	r2, [r3, #1]
		draw_cell(position.x, position.y);
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <move+0x130>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <move+0x130>)
 8000d22:	7852      	ldrb	r2, [r2, #1]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fe0c 	bl	8000944 <draw_cell>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	080063f4 	.word	0x080063f4
 8000d3c:	20000248 	.word	0x20000248
 8000d40:	200001a4 	.word	0x200001a4
 8000d44:	20000004 	.word	0x20000004
 8000d48:	080063fc 	.word	0x080063fc
 8000d4c:	08006404 	.word	0x08006404

08000d50 <matrix_init>:

// initialize screen
void matrix_init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	HAL_Delay(500);
 8000d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5a:	f000 fe6f 	bl	8001a3c <HAL_Delay>
	buf[0] = OP_DISPLAYTEST;
 8000d5e:	230f      	movs	r3, #15
 8000d60:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x00;
 8000d62:	2300      	movs	r3, #0
 8000d64:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d6c:	4862      	ldr	r0, [pc, #392]	; (8000ef8 <matrix_init+0x1a8>)
 8000d6e:	f001 ff1b 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2202      	movs	r2, #2
 8000d76:	4619      	mov	r1, r3
 8000d78:	4860      	ldr	r0, [pc, #384]	; (8000efc <matrix_init+0x1ac>)
 8000d7a:	f003 f901 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2202      	movs	r2, #2
 8000d82:	4619      	mov	r1, r3
 8000d84:	485d      	ldr	r0, [pc, #372]	; (8000efc <matrix_init+0x1ac>)
 8000d86:	f003 f8fb 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	485a      	ldr	r0, [pc, #360]	; (8000efc <matrix_init+0x1ac>)
 8000d92:	f003 f8f5 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2202      	movs	r2, #2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4857      	ldr	r0, [pc, #348]	; (8000efc <matrix_init+0x1ac>)
 8000d9e:	f003 f8ef 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da8:	4853      	ldr	r0, [pc, #332]	; (8000ef8 <matrix_init+0x1a8>)
 8000daa:	f001 fefd 	bl	8002ba8 <HAL_GPIO_WritePin>

	buf[0] = OP_SCANLIMIT;
 8000dae:	230b      	movs	r3, #11
 8000db0:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x07;
 8000db2:	2307      	movs	r3, #7
 8000db4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	484e      	ldr	r0, [pc, #312]	; (8000ef8 <matrix_init+0x1a8>)
 8000dbe:	f001 fef3 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484c      	ldr	r0, [pc, #304]	; (8000efc <matrix_init+0x1ac>)
 8000dca:	f003 f8d9 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4849      	ldr	r0, [pc, #292]	; (8000efc <matrix_init+0x1ac>)
 8000dd6:	f003 f8d3 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4619      	mov	r1, r3
 8000de0:	4846      	ldr	r0, [pc, #280]	; (8000efc <matrix_init+0x1ac>)
 8000de2:	f003 f8cd 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2202      	movs	r2, #2
 8000dea:	4619      	mov	r1, r3
 8000dec:	4843      	ldr	r0, [pc, #268]	; (8000efc <matrix_init+0x1ac>)
 8000dee:	f003 f8c7 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df8:	483f      	ldr	r0, [pc, #252]	; (8000ef8 <matrix_init+0x1a8>)
 8000dfa:	f001 fed5 	bl	8002ba8 <HAL_GPIO_WritePin>

	buf[0] = OP_DECODEMODE;
 8000dfe:	2309      	movs	r3, #9
 8000e00:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0c:	483a      	ldr	r0, [pc, #232]	; (8000ef8 <matrix_init+0x1a8>)
 8000e0e:	f001 fecb 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2202      	movs	r2, #2
 8000e16:	4619      	mov	r1, r3
 8000e18:	4838      	ldr	r0, [pc, #224]	; (8000efc <matrix_init+0x1ac>)
 8000e1a:	f003 f8b1 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2202      	movs	r2, #2
 8000e22:	4619      	mov	r1, r3
 8000e24:	4835      	ldr	r0, [pc, #212]	; (8000efc <matrix_init+0x1ac>)
 8000e26:	f003 f8ab 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4832      	ldr	r0, [pc, #200]	; (8000efc <matrix_init+0x1ac>)
 8000e32:	f003 f8a5 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482f      	ldr	r0, [pc, #188]	; (8000efc <matrix_init+0x1ac>)
 8000e3e:	f003 f89f 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <matrix_init+0x1a8>)
 8000e4a:	f001 fead 	bl	8002ba8 <HAL_GPIO_WritePin>

	buf[0] = OP_SHUTDOWN;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x01;
 8000e52:	2301      	movs	r3, #1
 8000e54:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <matrix_init+0x1a8>)
 8000e5e:	f001 fea3 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2202      	movs	r2, #2
 8000e66:	4619      	mov	r1, r3
 8000e68:	4824      	ldr	r0, [pc, #144]	; (8000efc <matrix_init+0x1ac>)
 8000e6a:	f003 f889 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2202      	movs	r2, #2
 8000e72:	4619      	mov	r1, r3
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <matrix_init+0x1ac>)
 8000e76:	f003 f883 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481e      	ldr	r0, [pc, #120]	; (8000efc <matrix_init+0x1ac>)
 8000e82:	f003 f87d 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2202      	movs	r2, #2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <matrix_init+0x1ac>)
 8000e8e:	f003 f877 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <matrix_init+0x1a8>)
 8000e9a:	f001 fe85 	bl	8002ba8 <HAL_GPIO_WritePin>

	buf[0] = OP_INTENSITY;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	713b      	strb	r3, [r7, #4]
	buf[1] = 0x05;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <matrix_init+0x1a8>)
 8000eae:	f001 fe7b 	bl	8002ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <matrix_init+0x1ac>)
 8000eba:	f003 f861 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <matrix_init+0x1ac>)
 8000ec6:	f003 f85b 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2202      	movs	r2, #2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <matrix_init+0x1ac>)
 8000ed2:	f003 f855 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_SPI_Transmit_IT (&hspi1, buf, 2);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2202      	movs	r2, #2
 8000eda:	4619      	mov	r1, r3
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <matrix_init+0x1ac>)
 8000ede:	f003 f84f 	bl	8003f80 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <matrix_init+0x1a8>)
 8000eea:	f001 fe5d 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	200000f4 	.word	0x200000f4

08000f00 <HAL_TIM_PeriodElapsedCallback>:

// every 2 sec we randomly create new obstacles
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a35      	ldr	r2, [pc, #212]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d163      	bne.n	8000fda <HAL_TIM_PeriodElapsedCallback+0xda>
        {
        	uint8_t temp;
        	uint32_t num = HAL_RNG_GetRandomNumber(&hrng);
 8000f12:	4835      	ldr	r0, [pc, #212]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000f14:	f002 ff74 	bl	8003e00 <HAL_RNG_GetRandomNumber>
 8000f18:	60f8      	str	r0, [r7, #12]
        	if(num < 1431655765){
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8000f20:	d21b      	bcs.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x5a>
        		temp = map[3][5] | 0x80;
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f24:	7f5b      	ldrb	r3, [r3, #29]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2c:	72fb      	strb	r3, [r7, #11]
        		map[3][5] = temp;
 8000f2e:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f30:	7afb      	ldrb	r3, [r7, #11]
 8000f32:	7753      	strb	r3, [r2, #29]
        		temp = map[3][6] | 0x80;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f36:	7f9b      	ldrb	r3, [r3, #30]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f3e:	72fb      	strb	r3, [r7, #11]
        		map[3][6] = temp;
 8000f40:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f42:	7afb      	ldrb	r3, [r7, #11]
 8000f44:	7793      	strb	r3, [r2, #30]
        		temp = map[3][7] | 0x80;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f48:	7fdb      	ldrb	r3, [r3, #31]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f50:	72fb      	strb	r3, [r7, #11]
        		map[3][7] = temp;
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	77d3      	strb	r3, [r2, #31]
        		map[3][0] = temp;
        		temp = map[3][1] | 0x80;
        		map[3][1] = temp;
        	}
        }
}
 8000f58:	e03f      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0xda>
        	else if((num >= 1431655765) & (num < 2863311530)){
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8000f60:	bf2c      	ite	cs
 8000f62:	2301      	movcs	r3, #1
 8000f64:	2300      	movcc	r3, #0
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000f6e:	bf34      	ite	cc
 8000f70:	2301      	movcc	r3, #1
 8000f72:	2300      	movcs	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4013      	ands	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d01b      	beq.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0xb6>
        		temp = map[3][2] | 0x80;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f80:	7e9b      	ldrb	r3, [r3, #26]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f88:	72fb      	strb	r3, [r7, #11]
      		 	map[3][2] = temp;
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	7693      	strb	r3, [r2, #26]
        		temp = map[3][3] | 0x80;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f92:	7edb      	ldrb	r3, [r3, #27]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9a:	72fb      	strb	r3, [r7, #11]
      		 	map[3][3] = temp;
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	76d3      	strb	r3, [r2, #27]
        		temp = map[3][4] | 0x80;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fa4:	7f1b      	ldrb	r3, [r3, #28]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fac:	72fb      	strb	r3, [r7, #11]
      		 	map[3][4] = temp;
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	7713      	strb	r3, [r2, #28]
}
 8000fb4:	e011      	b.n	8000fda <HAL_TIM_PeriodElapsedCallback+0xda>
        		temp = map[3][0] | 0x80;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc0:	72fb      	strb	r3, [r7, #11]
        		map[3][0] = temp;
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fc4:	7afb      	ldrb	r3, [r7, #11]
 8000fc6:	7613      	strb	r3, [r2, #24]
        		temp = map[3][1] | 0x80;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fca:	7e5b      	ldrb	r3, [r3, #25]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd2:	72fb      	strb	r3, [r7, #11]
        		map[3][1] = temp;
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	7653      	strb	r3, [r2, #25]
}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010000 	.word	0x40010000
 8000fe8:	200000e4 	.word	0x200000e4
 8000fec:	20000228 	.word	0x20000228

08000ff0 <HAL_GPIO_EXTI_Callback>:

// restart game
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	clear_all();
 8000ffa:	f7ff fdc9 	bl	8000b90 <clear_all>
	isPlaying = 1;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_GPIO_EXTI_Callback+0x28>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
	position.x = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
	position.y = OP_DIGIT7;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_GPIO_EXTI_Callback+0x2c>)
 800100c:	2208      	movs	r2, #8
 800100e:	705a      	strb	r2, [r3, #1]
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fcac 	bl	8001982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f853 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fa11 	bl	8001454 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001032:	f000 f94d 	bl	80012d0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001036:	f000 f8b3 	bl	80011a0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800103a:	f000 f9db 	bl	80013f4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800103e:	f000 f985 	bl	800134c <MX_TIM1_Init>
  MX_RNG_Init();
 8001042:	f000 f931 	bl	80012a8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  matrix_init();
 8001046:	f7ff fe83 	bl	8000d50 <matrix_init>

  HAL_Delay(500);
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f000 fcf5 	bl	8001a3c <HAL_Delay>

  clear_all();
 8001052:	f7ff fd9d 	bl	8000b90 <clear_all>

  __HAL_TIM_CLEAR_FLAG(&htim1, TIM_SR_UIF); // очищаем флаг
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <main+0xa4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f06f 0201 	mvn.w	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim1);
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <main+0xa4>)
 8001062:	f003 fba7 	bl	80047b4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isPlaying){
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <main+0xa8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d027      	beq.n	80010be <main+0x9e>
		  HAL_ADCEx_InjectedStart(&hadc1);
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <main+0xac>)
 8001070:	f001 f828 	bl	80020c4 <HAL_ADCEx_InjectedStart>
		  HAL_ADC_PollForConversion(&hadc1,100);
 8001074:	2164      	movs	r1, #100	; 0x64
 8001076:	4815      	ldr	r0, [pc, #84]	; (80010cc <main+0xac>)
 8001078:	f000 fd48 	bl	8001b0c <HAL_ADC_PollForConversion>
		  // the result of polling each channel is written to its own register, and we pick it up and copy it to a variable
		  uint16_t x_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800107c:	2101      	movs	r1, #1
 800107e:	4813      	ldr	r0, [pc, #76]	; (80010cc <main+0xac>)
 8001080:	f001 f8e8 	bl	8002254 <HAL_ADCEx_InjectedGetValue>
 8001084:	4603      	mov	r3, r0
 8001086:	80fb      	strh	r3, [r7, #6]
		  uint16_t y_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001088:	2102      	movs	r1, #2
 800108a:	4810      	ldr	r0, [pc, #64]	; (80010cc <main+0xac>)
 800108c:	f001 f8e2 	bl	8002254 <HAL_ADCEx_InjectedGetValue>
 8001090:	4603      	mov	r3, r0
 8001092:	80bb      	strh	r3, [r7, #4]

		  draw_bar();
 8001094:	f7ff fb30 	bl	80006f8 <draw_bar>
		  move(x_raw, y_raw);
 8001098:	88ba      	ldrh	r2, [r7, #4]
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fdb8 	bl	8000c14 <move>
		  HAL_Delay(500);
 80010a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a8:	f000 fcc8 	bl	8001a3c <HAL_Delay>
		  clear_cell(position.x, position.y);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <main+0xb0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <main+0xb0>)
 80010b2:	7852      	ldrb	r2, [r2, #1]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fcd6 	bl	8000a68 <clear_cell>
 80010bc:	e7d3      	b.n	8001066 <main+0x46>
	  	  }
	  	  else{
	  		  write_Lose();
 80010be:	f7ff fa81 	bl	80005c4 <write_Lose>
	  if(isPlaying){
 80010c2:	e7d0      	b.n	8001066 <main+0x46>
 80010c4:	20000158 	.word	0x20000158
 80010c8:	20000000 	.word	0x20000000
 80010cc:	2000009c 	.word	0x2000009c
 80010d0:	20000004 	.word	0x20000004

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	; 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fce0 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <SystemClock_Config+0xc4>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <SystemClock_Config+0xc4>)
 80010fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001102:	6413      	str	r3, [r2, #64]	; 0x40
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <SystemClock_Config+0xc4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <SystemClock_Config+0xc8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <SystemClock_Config+0xc8>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <SystemClock_Config+0xc8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001140:	2310      	movs	r3, #16
 8001142:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001144:	23c0      	movs	r3, #192	; 0xc0
 8001146:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fd59 	bl	8002c0c <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001160:	f000 f9e8 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f001 ffe8 	bl	8003154 <HAL_RCC_ClockConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800118a:	f000 f9d3 	bl	8001534 <Error_Handler>
  }
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2220      	movs	r2, #32
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fc74 	bl	8005aa8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011c2:	4a36      	ldr	r2, [pc, #216]	; (800129c <MX_ADC1_Init+0xfc>)
 80011c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011ee:	4a2c      	ldr	r2, [pc, #176]	; (80012a0 <MX_ADC1_Init+0x100>)
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_ADC1_Init+0xf8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_ADC1_Init+0xf8>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_ADC1_Init+0xf8>)
 8001208:	2201      	movs	r2, #1
 800120a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <MX_ADC1_Init+0xf8>)
 800120e:	f000 fc39 	bl	8001a84 <HAL_ADC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 f98c 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800121c:	2306      	movs	r3, #6
 800121e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4619      	mov	r1, r3
 800122e:	481a      	ldr	r0, [pc, #104]	; (8001298 <MX_ADC1_Init+0xf8>)
 8001230:	f000 fcf8 	bl	8001c24 <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800123a:	f000 f97b 	bl	8001534 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800123e:	2304      	movs	r3, #4
 8001240:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001242:	2301      	movs	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x104>)
 8001254:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <MX_ADC1_Init+0xf8>)
 8001268:	f001 f82c 	bl	80022c4 <HAL_ADCEx_InjectedConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001272:	f000 f95f 	bl	8001534 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001276:	2302      	movs	r3, #2
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_ADC1_Init+0xf8>)
 8001280:	f001 f820 	bl	80022c4 <HAL_ADCEx_InjectedConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800128a:	f000 f953 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000009c 	.word	0x2000009c
 800129c:	40012000 	.word	0x40012000
 80012a0:	0f000001 	.word	0x0f000001
 80012a4:	000f0001 	.word	0x000f0001

080012a8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_RNG_Init+0x20>)
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <MX_RNG_Init+0x24>)
 80012b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_RNG_Init+0x20>)
 80012b4:	f002 fd24 	bl	8003d00 <HAL_RNG_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80012be:	f000 f939 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000e4 	.word	0x200000e4
 80012cc:	50060800 	.word	0x50060800

080012d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_SPI1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_SPI1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_SPI1_Init+0x74>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_SPI1_Init+0x74>)
 80012e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI1_Init+0x74>)
 80012ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SPI1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI1_Init+0x74>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI1_Init+0x74>)
 8001308:	2220      	movs	r2, #32
 800130a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_SPI1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_SPI1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI1_Init+0x74>)
 8001320:	2207      	movs	r2, #7
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_SPI1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI1_Init+0x74>)
 800132c:	2208      	movs	r2, #8
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_SPI1_Init+0x74>)
 8001332:	f002 fd7a 	bl	8003e2a <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800133c:	f000 f8fa 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000f4 	.word	0x200000f4
 8001348:	40013000 	.word	0x40013000

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_TIM1_Init+0xa0>)
 800136c:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <MX_TIM1_Init+0xa4>)
 800136e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM1_Init+0xa0>)
 8001372:	f240 623f 	movw	r2, #1599	; 0x63f
 8001376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM1_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_TIM1_Init+0xa0>)
 8001380:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_TIM1_Init+0xa0>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_TIM1_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_TIM1_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001398:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM1_Init+0xa0>)
 800139a:	f003 f9b4 	bl	8004706 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 f8c6 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_TIM1_Init+0xa0>)
 80013b6:	f003 fb95 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013c0:	f000 f8b8 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM1_Init+0xa0>)
 80013d6:	f003 fdb1 	bl	8004f3c <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 f8a8 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000158 	.word	0x20000158
 80013f0:	40010000 	.word	0x40010000

080013f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_USART3_UART_Init+0x58>)
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <MX_USART3_UART_Init+0x5c>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_USART3_UART_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART3_UART_Init+0x58>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART3_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART3_UART_Init+0x58>)
 8001438:	f003 fe2c 	bl	8005094 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001442:	f000 f877 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200001a4 	.word	0x200001a4
 8001450:	40004800 	.word	0x40004800

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <MX_GPIO_Init+0xd4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a2e      	ldr	r2, [pc, #184]	; (8001528 <MX_GPIO_Init+0xd4>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_GPIO_Init+0xd4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_GPIO_Init+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a28      	ldr	r2, [pc, #160]	; (8001528 <MX_GPIO_Init+0xd4>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_GPIO_Init+0xd4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a22      	ldr	r2, [pc, #136]	; (8001528 <MX_GPIO_Init+0xd4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_GPIO_Init+0xd4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_GPIO_Init+0xd4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_GPIO_Init+0xd4>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_GPIO_Init+0xd4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_GPIO_Init+0xd8>)
 80014d2:	f001 fb69 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <MX_GPIO_Init+0xdc>)
 80014ee:	f001 f9af 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <MX_GPIO_Init+0xd8>)
 800150c:	f001 f9a0 	bl	8002850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2028      	movs	r0, #40	; 0x28
 8001516:	f001 f942 	bl	800279e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800151a:	2028      	movs	r0, #40	; 0x28
 800151c:	f001 f95b 	bl	80027d6 <HAL_NVIC_EnableIRQ>

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40021400 	.word	0x40021400
 8001530:	40020800 	.word	0x40020800

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x44>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d123      	bne.n	80015f2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80015da:	2350      	movs	r3, #80	; 0x50
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015de:	2303      	movs	r3, #3
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_ADC_MspInit+0x7c>)
 80015ee:	f001 f92f 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40012000 	.word	0x40012000
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0a4      	sub	sp, #144	; 0x90
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2284      	movs	r2, #132	; 0x84
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fa45 	bl	8005aa8 <memset>
  if(hrng->Instance==RNG)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_RNG_MspInit+0x60>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11b      	bne.n	8001660 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001628:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800162c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4618      	mov	r0, r3
 800163a:	f001 ff71 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001644:	f7ff ff76 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_RNG_MspInit+0x64>)
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_RNG_MspInit+0x64>)
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	6353      	str	r3, [r2, #52]	; 0x34
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RNG_MspInit+0x64>)
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001660:	bf00      	nop
 8001662:	3790      	adds	r7, #144	; 0x90
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	50060800 	.word	0x50060800
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <HAL_SPI_MspInit+0x8c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12f      	bne.n	80016f2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_SPI_MspInit+0x90>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_SPI_MspInit+0x90>)
 8001698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_SPI_MspInit+0x90>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_SPI_MspInit+0x90>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_SPI_MspInit+0x90>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_SPI_MspInit+0x90>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016c2:	23a0      	movs	r3, #160	; 0xa0
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016d2:	2305      	movs	r3, #5
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <HAL_SPI_MspInit+0x94>)
 80016de:	f001 f8b7 	bl	8002850 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2023      	movs	r0, #35	; 0x23
 80016e8:	f001 f859 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016ec:	2023      	movs	r0, #35	; 0x23
 80016ee:	f001 f872 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40013000 	.word	0x40013000
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x44>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a0c      	ldr	r2, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_TIM_Base_MspInit+0x48>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2019      	movs	r0, #25
 8001738:	f001 f831 	bl	800279e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800173c:	2019      	movs	r0, #25
 800173e:	f001 f84a 	bl	80027d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40010000 	.word	0x40010000
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0aa      	sub	sp, #168	; 0xa8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	2284      	movs	r2, #132	; 0x84
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f004 f997 	bl	8005aa8 <memset>
  if(huart->Instance==USART3)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_UART_MspInit+0xb4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d13c      	bne.n	80017fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001788:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800178a:	2300      	movs	r3, #0
 800178c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fec4 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800179e:	f7ff fec9 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_UART_MspInit+0xb8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_UART_MspInit+0xbc>)
 80017fa:	f001 f829 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	37a8      	adds	r7, #168	; 0xa8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40004800 	.word	0x40004800
 800180c:	40023800 	.word	0x40023800
 8001810:	40020c00 	.word	0x40020c00

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f8cc 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800186e:	f003 f819 	bl	80048a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000158 	.word	0x20000158

0800187c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <SPI1_IRQHandler+0x10>)
 8001882:	f002 fc0b 	bl	800409c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000f4 	.word	0x200000f4

08001890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001894:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001898:	f001 f9a0 	bl	8002bdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f004 f8c0 	bl	8005a54 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20050000 	.word	0x20050000
 8001900:	00000400 	.word	0x00000400
 8001904:	20000288 	.word	0x20000288
 8001908:	200002a0 	.word	0x200002a0

0800190c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001936:	490e      	ldr	r1, [pc, #56]	; (8001970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800194c:	4c0b      	ldr	r4, [pc, #44]	; (800197c <LoopFillZerobss+0x26>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195a:	f7ff ffd7 	bl	800190c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f004 f87f 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fb5d 	bl	8001020 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001974:	0800646c 	.word	0x0800646c
  ldr r2, =_sbss
 8001978:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800197c:	200002a0 	.word	0x200002a0

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>

08001982 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 fefe 	bl	8002788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198c:	200f      	movs	r0, #15
 800198e:	f000 f805 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001992:	f7ff fdd5 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 ff19 	bl	80027f2 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 fee1 	bl	800279e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000010 	.word	0x20000010
 80019f4:	20000018 	.word	0x20000018
 80019f8:	20000014 	.word	0x20000014

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000018 	.word	0x20000018
 8001a20:	2000028c 	.word	0x2000028c

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000028c 	.word	0x2000028c

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000018 	.word	0x20000018

08001a84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e031      	b.n	8001afe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fd70 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_ADC_Init+0x84>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	f043 0202 	orr.w	r2, r3, #2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f9fc 	bl	8001ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f023 0303 	bic.w	r3, r3, #3
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
 8001aee:	e001      	b.n	8001af4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	ffffeefd 	.word	0xffffeefd

08001b0c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d113      	bne.n	8001b52 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b38:	d10b      	bne.n	8001b52 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f043 0220 	orr.w	r2, r3, #32
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e063      	b.n	8001c1a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b52:	f7ff ff67 	bl	8001a24 <HAL_GetTick>
 8001b56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b58:	e021      	b.n	8001b9e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d01d      	beq.n	8001b9e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_ADC_PollForConversion+0x6c>
 8001b68:	f7ff ff5c 	bl	8001a24 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d212      	bcs.n	8001b9e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d00b      	beq.n	8001b9e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f043 0204 	orr.w	r2, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e03d      	b.n	8001c1a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d1d6      	bne.n	8001b5a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0212 	mvn.w	r2, #18
 8001bb4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d123      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11f      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1c>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e136      	b.n	8001eae <HAL_ADC_ConfigChannel+0x28a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b09      	cmp	r3, #9
 8001c4e:	d93a      	bls.n	8001cc6 <HAL_ADC_ConfigChannel+0xa2>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c58:	d035      	beq.n	8001cc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68d9      	ldr	r1, [r3, #12]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	2207      	movs	r2, #7
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a8d      	ldr	r2, [pc, #564]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10a      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	061a      	lsls	r2, r3, #24
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c9e:	e035      	b.n	8001d0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4403      	add	r3, r0
 8001cb8:	3b1e      	subs	r3, #30
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc4:	e022      	b.n	8001d0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6919      	ldr	r1, [r3, #16]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6919      	ldr	r1, [r3, #16]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4403      	add	r3, r0
 8001d02:	409a      	lsls	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d824      	bhi.n	8001d5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	3b05      	subs	r3, #5
 8001d26:	221f      	movs	r2, #31
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b05      	subs	r3, #5
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d5c:	e04c      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d824      	bhi.n	8001db0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b23      	subs	r3, #35	; 0x23
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b23      	subs	r3, #35	; 0x23
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
 8001dae:	e023      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b41      	subs	r3, #65	; 0x41
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b41      	subs	r3, #65	; 0x41
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e16:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10f      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d10b      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a25      	ldr	r2, [pc, #148]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e34:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e40:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_ADC_ConfigChannel+0x29c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d12b      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d003      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x23a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b11      	cmp	r3, #17
 8001e5c:	d122      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e68:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <HAL_ADC_ConfigChannel+0x298>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x2a8>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9a      	lsrs	r2, r3, #18
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e96:	e002      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	10000012 	.word	0x10000012
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed8:	4b78      	ldr	r3, [pc, #480]	; (80020bc <ADC_Init+0x1ec>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <ADC_Init+0x1ec>)
 8001ede:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ee2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <ADC_Init+0x1ec>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4973      	ldr	r1, [pc, #460]	; (80020bc <ADC_Init+0x1ec>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <ADC_Init+0x1f0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e00f      	b.n	8001fca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0202 	bic.w	r2, r2, #2
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	005a      	lsls	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	3b01      	subs	r3, #1
 8002024:	035a      	lsls	r2, r3, #13
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e007      	b.n	8002040 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	3b01      	subs	r3, #1
 800205c:	051a      	lsls	r2, r3, #20
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002082:	025a      	lsls	r2, r3, #9
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	029a      	lsls	r2, r3, #10
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	0f000001 	.word	0x0f000001

080020c4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp1 = 0, tmp2 = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADCEx_InjectedStart+0x22>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e0a6      	b.n	8002234 <HAL_ADCEx_InjectedStart+0x170>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d018      	beq.n	800212e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_ADCEx_InjectedStart+0x17c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_ADCEx_InjectedStart+0x180>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9a      	lsrs	r2, r3, #18
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002120:	e002      	b.n	8002128 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b01      	cmp	r3, #1
 800213a:	d16e      	bne.n	800221a <HAL_ADCEx_InjectedStart+0x156>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_ADCEx_InjectedStart+0x184>)
 8002142:	4013      	ands	r3, r2
 8002144:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <HAL_ADCEx_InjectedStart+0x9a>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0204 	mvn.w	r2, #4
 800216e:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_ADCEx_InjectedStart+0x188>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	2b00      	cmp	r3, #0
 800217a:	d124      	bne.n	80021c6 <HAL_ADCEx_InjectedStart+0x102>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d041      	beq.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d03e      	beq.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e035      	b.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_ADCEx_InjectedStart+0x18c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11a      	bne.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d017      	beq.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d014      	beq.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e00b      	b.n	8002232 <HAL_ADCEx_InjectedStart+0x16e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f043 0210 	orr.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	20000010 	.word	0x20000010
 8002244:	431bde83 	.word	0x431bde83
 8002248:	ffffcffe 	.word	0xffffcffe
 800224c:	40012300 	.word	0x40012300
 8002250:	40012000 	.word	0x40012000

08002254 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f06f 0204 	mvn.w	r2, #4
 800226a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	2b03      	cmp	r3, #3
 8002272:	d81f      	bhi.n	80022b4 <HAL_ADCEx_InjectedGetValue+0x60>
 8002274:	a201      	add	r2, pc, #4	; (adr r2, 800227c <HAL_ADCEx_InjectedGetValue+0x28>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	080022ab 	.word	0x080022ab
 8002280:	080022a1 	.word	0x080022a1
 8002284:	08002297 	.word	0x08002297
 8002288:	0800228d 	.word	0x0800228d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002292:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8002294:	e00f      	b.n	80022b6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800229e:	e00a      	b.n	80022b6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	60fb      	str	r3, [r7, #12]
    }
    break;
 80022a8:	e005      	b.n	80022b6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	60fb      	str	r3, [r7, #12]
    }
    break;
 80022b2:	e000      	b.n	80022b6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80022b4:	bf00      	nop
  }
  return tmp;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADCEx_InjectedConfigChannel+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e174      	b.n	80025c6 <HAL_ADCEx_InjectedConfigChannel+0x302>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b09      	cmp	r3, #9
 80022ea:	d925      	bls.n	8002338 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68d9      	ldr	r1, [r3, #12]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	3b1e      	subs	r3, #30
 8002302:	2207      	movs	r2, #7
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68d9      	ldr	r1, [r3, #12]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	4603      	mov	r3, r0
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4403      	add	r3, r0
 800232a:	3b1e      	subs	r3, #30
 800232c:	409a      	lsls	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	e022      	b.n	800237e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	2207      	movs	r2, #7
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6919      	ldr	r1, [r3, #16]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	4603      	mov	r3, r0
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4403      	add	r3, r0
 8002374:	409a      	lsls	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800238c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	3b01      	subs	r3, #1
 800239a:	051a      	lsls	r2, r3, #20
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3303      	adds	r3, #3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3303      	adds	r3, #3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a70      	ldr	r2, [pc, #448]	; (80025d4 <HAL_ADCEx_InjectedConfigChannel+0x310>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d022      	beq.n	800245c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002446:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	e00f      	b.n	800247c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800246a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800247a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7d5b      	ldrb	r3, [r3, #21]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e007      	b.n	80024a6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	7d1b      	ldrb	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	e007      	b.n	80024d0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ce:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d02a      	beq.n	800252e <HAL_ADCEx_InjectedConfigChannel+0x26a>
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d83a      	bhi.n	8002552 <HAL_ADCEx_InjectedConfigChannel+0x28e>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d002      	beq.n	80024e6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d012      	beq.n	800250a <HAL_ADCEx_InjectedConfigChannel+0x246>
 80024e4:	e035      	b.n	8002552 <HAL_ADCEx_InjectedConfigChannel+0x28e>
  {
    case 1:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6959      	ldr	r1, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
      break;
 8002508:	e035      	b.n	8002576 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
    case 2:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6999      	ldr	r1, [r3, #24]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8002516:	400b      	ands	r3, r1
 8002518:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6999      	ldr	r1, [r3, #24]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
      break;
 800252c:	e023      	b.n	8002576 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
    case 3:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69d9      	ldr	r1, [r3, #28]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 800253a:	400b      	ands	r3, r1
 800253c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	61da      	str	r2, [r3, #28]
      break;
 8002550:	e011      	b.n	8002576 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a19      	ldr	r1, [r3, #32]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b1e      	ldr	r3, [pc, #120]	; (80025d8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 800255e:	400b      	ands	r3, r1
 8002560:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a19      	ldr	r1, [r3, #32]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	621a      	str	r2, [r3, #32]
      break;
 8002574:	bf00      	nop
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d109      	bne.n	8002594 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b12      	cmp	r3, #18
 8002586:	d105      	bne.n	8002594 <HAL_ADCEx_InjectedConfigChannel+0x2d0>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800258e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002592:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d105      	bne.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x2f8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 80025b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ba:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	000f0001 	.word	0x000f0001
 80025d8:	fffff000 	.word	0xfffff000
 80025dc:	40012000 	.word	0x40012000
 80025e0:	40012300 	.word	0x40012300
 80025e4:	10000012 	.word	0x10000012

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <__NVIC_SetPriorityGrouping+0x40>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	4313      	orrs	r3, r2
 8002614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002616:	4a04      	ldr	r2, [pc, #16]	; (8002628 <__NVIC_SetPriorityGrouping+0x40>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00
 800262c:	05fa0000 	.word	0x05fa0000

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4907      	ldr	r1, [pc, #28]	; (8002684 <__NVIC_EnableIRQ+0x38>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000e100 	.word	0xe000e100

08002688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	6039      	str	r1, [r7, #0]
 8002692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0a      	blt.n	80026b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	490c      	ldr	r1, [pc, #48]	; (80026d4 <__NVIC_SetPriority+0x4c>)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	0112      	lsls	r2, r2, #4
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	440b      	add	r3, r1
 80026ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b0:	e00a      	b.n	80026c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4908      	ldr	r1, [pc, #32]	; (80026d8 <__NVIC_SetPriority+0x50>)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	3b04      	subs	r3, #4
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	440b      	add	r3, r1
 80026c6:	761a      	strb	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f1c3 0307 	rsb	r3, r3, #7
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	bf28      	it	cs
 80026fa:	2304      	movcs	r3, #4
 80026fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3304      	adds	r3, #4
 8002702:	2b06      	cmp	r3, #6
 8002704:	d902      	bls.n	800270c <NVIC_EncodePriority+0x30>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3b03      	subs	r3, #3
 800270a:	e000      	b.n	800270e <NVIC_EncodePriority+0x32>
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	401a      	ands	r2, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43d9      	mvns	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	4313      	orrs	r3, r2
         );
}
 8002736:	4618      	mov	r0, r3
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002754:	d301      	bcc.n	800275a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002756:	2301      	movs	r3, #1
 8002758:	e00f      	b.n	800277a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <SysTick_Config+0x40>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002762:	210f      	movs	r1, #15
 8002764:	f04f 30ff 	mov.w	r0, #4294967295
 8002768:	f7ff ff8e 	bl	8002688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <SysTick_Config+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <SysTick_Config+0x40>)
 8002774:	2207      	movs	r2, #7
 8002776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000e010 	.word	0xe000e010

08002788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff29 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b0:	f7ff ff3e 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6978      	ldr	r0, [r7, #20]
 80027bc:	f7ff ff8e 	bl	80026dc <NVIC_EncodePriority>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff5d 	bl	8002688 <__NVIC_SetPriority>
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff31 	bl	800264c <__NVIC_EnableIRQ>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffa2 	bl	8002744 <SysTick_Config>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00c      	b.n	8002842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e175      	b.n	8002b5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	429a      	cmp	r2, r3
 800288a:	f040 8164 	bne.w	8002b56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d005      	beq.n	80028a6 <HAL_GPIO_Init+0x56>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d130      	bne.n	8002908 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 0201 	and.w	r2, r3, #1
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d017      	beq.n	8002944 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	2203      	movs	r2, #3
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d123      	bne.n	8002998 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	08da      	lsrs	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3208      	adds	r2, #8
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	2203      	movs	r2, #3
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80be 	beq.w	8002b56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_GPIO_Init+0x324>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_GPIO_Init+0x324>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_GPIO_Init+0x324>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029f2:	4a61      	ldr	r2, [pc, #388]	; (8002b78 <HAL_GPIO_Init+0x328>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_GPIO_Init+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d037      	beq.n	8002a8e <HAL_GPIO_Init+0x23e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a57      	ldr	r2, [pc, #348]	; (8002b80 <HAL_GPIO_Init+0x330>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_GPIO_Init+0x23a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x236>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_GPIO_Init+0x338>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x232>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <HAL_GPIO_Init+0x33c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x22e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <HAL_GPIO_Init+0x340>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x22a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x344>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_GPIO_Init+0x348>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x222>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_GPIO_Init+0x34c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x21e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <HAL_GPIO_Init+0x350>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x21a>
 8002a66:	2309      	movs	r3, #9
 8002a68:	e012      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	e010      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	e00e      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a72:	2307      	movs	r3, #7
 8002a74:	e00c      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e00a      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	e008      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x240>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f002 0203 	and.w	r2, r2, #3
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002aa0:	4935      	ldr	r1, [pc, #212]	; (8002b78 <HAL_GPIO_Init+0x328>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_GPIO_Init+0x354>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	f67f ae86 	bls.w	8002870 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40022400 	.word	0x40022400
 8002ba4:	40013c00 	.word	0x40013c00

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	807b      	strh	r3, [r7, #2]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb8:	787b      	ldrb	r3, [r7, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bc4:	e003      	b.n	8002bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bc6:	887b      	ldrh	r3, [r7, #2]
 8002bc8:	041a      	lsls	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bf2:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f9f8 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40013c00 	.word	0x40013c00

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e291      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8087 	beq.w	8002d3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c30:	4b96      	ldr	r3, [pc, #600]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d00c      	beq.n	8002c56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3c:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d112      	bne.n	8002c6e <HAL_RCC_OscConfig+0x62>
 8002c48:	4b90      	ldr	r3, [pc, #576]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c56:	4b8d      	ldr	r3, [pc, #564]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d06c      	beq.n	8002d3c <HAL_RCC_OscConfig+0x130>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d168      	bne.n	8002d3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e26b      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x7a>
 8002c78:	4b84      	ldr	r3, [pc, #528]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a83      	ldr	r2, [pc, #524]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e02e      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x9c>
 8002c8e:	4b7f      	ldr	r3, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b7c      	ldr	r3, [pc, #496]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a7b      	ldr	r2, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e01d      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0xc0>
 8002cb2:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a75      	ldr	r2, [pc, #468]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0xd8>
 8002ccc:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6b      	ldr	r2, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fe9a 	bl	8001a24 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fe96 	bl	8001a24 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e21f      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b61      	ldr	r3, [pc, #388]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe8>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe86 	bl	8001a24 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fe fe82 	bl	8001a24 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e20b      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x110>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d069      	beq.n	8002e1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4a:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d56:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d11c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x190>
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d116      	bne.n	8002d9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_RCC_OscConfig+0x17a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1df      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d86:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	493d      	ldr	r1, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	e040      	b.n	8002e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d023      	beq.n	8002dec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da4:	4b39      	ldr	r3, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fe38 	bl	8001a24 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fe fe34 	bl	8001a24 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1bd      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4929      	ldr	r1, [pc, #164]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
 8002dea:	e018      	b.n	8002e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a26      	ldr	r2, [pc, #152]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe fe14 	bl	8001a24 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e00:	f7fe fe10 	bl	8001a24 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e199      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d038      	beq.n	8002e9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d019      	beq.n	8002e66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fdf1 	bl	8001a24 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fe fded 	bl	8001a24 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e176      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x23a>
 8002e64:	e01a      	b.n	8002e9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <HAL_RCC_OscConfig+0x280>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe fdd7 	bl	8001a24 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fdd3 	bl	8001a24 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d903      	bls.n	8002e90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e15c      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
 8002e8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b91      	ldr	r3, [pc, #580]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a4 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a87      	ldr	r2, [pc, #540]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b85      	ldr	r3, [pc, #532]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	; (80030dc <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fd9b 	bl	8001a24 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fd97 	bl	8001a24 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b64      	cmp	r3, #100	; 0x64
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e120      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f04:	4b75      	ldr	r3, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x31a>
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a6e      	ldr	r2, [pc, #440]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
 8002f24:	e02d      	b.n	8002f82 <HAL_RCC_OscConfig+0x376>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x33c>
 8002f2e:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a66      	ldr	r2, [pc, #408]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	e01c      	b.n	8002f82 <HAL_RCC_OscConfig+0x376>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x35e>
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a60      	ldr	r2, [pc, #384]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x376>
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fd4b 	bl	8001a24 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fd47 	bl	8001a24 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0ce      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RCC_OscConfig+0x386>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fd35 	bl	8001a24 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fd31 	bl	8001a24 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0b8      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80a4 	beq.w	8003144 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffc:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d06b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d149      	bne.n	80030a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fd02 	bl	8001a24 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fcfe 	bl	8001a24 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e087      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4313      	orrs	r3, r2
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 800306a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800306e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fcd2 	bl	8001a24 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe fcce 	bl	8001a24 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e057      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x478>
 80030a2:	e04f      	b.n	8003144 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fcb8 	bl	8001a24 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe fcb4 	bl	8001a24 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e03d      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4ac>
 80030d6:	e035      	b.n	8003144 <HAL_RCC_OscConfig+0x538>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030e0:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <HAL_RCC_OscConfig+0x544>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d028      	beq.n	8003140 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d121      	bne.n	8003140 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d11a      	bne.n	8003140 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003116:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003118:	4293      	cmp	r3, r2
 800311a:	d111      	bne.n	8003140 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	3b01      	subs	r3, #1
 800312a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800

08003154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0d0      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b67      	ldr	r3, [pc, #412]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	4965      	ldr	r1, [pc, #404]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b63      	ldr	r3, [pc, #396]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b8      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b4:	4b59      	ldr	r3, [pc, #356]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b50      	ldr	r3, [pc, #320]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	494d      	ldr	r1, [pc, #308]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d040      	beq.n	8003278 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d115      	bne.n	8003236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07f      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e073      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e06b      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4936      	ldr	r1, [pc, #216]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003248:	f7fe fbec 	bl	8001a24 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fbe8 	bl	8001a24 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e053      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2d      	ldr	r3, [pc, #180]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d210      	bcs.n	80032a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 020f 	bic.w	r2, r3, #15
 800328e:	4922      	ldr	r1, [pc, #136]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d001      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e032      	b.n	800330e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4916      	ldr	r1, [pc, #88]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032d2:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	490e      	ldr	r1, [pc, #56]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e6:	f000 f821 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80032ea:	4602      	mov	r2, r0
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	490a      	ldr	r1, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x1cc>)
 80032f8:	5ccb      	ldrb	r3, [r1, r3]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1d0>)
 8003300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1d4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fb48 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023c00 	.word	0x40023c00
 800331c:	40023800 	.word	0x40023800
 8003320:	08006410 	.word	0x08006410
 8003324:	20000010 	.word	0x20000010
 8003328:	20000014 	.word	0x20000014

0800332c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800332c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003330:	b090      	sub	sp, #64	; 0x40
 8003332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
 8003338:	2300      	movs	r3, #0
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800333c:	2300      	movs	r3, #0
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	4b59      	ldr	r3, [pc, #356]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d00d      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x40>
 8003350:	2b08      	cmp	r3, #8
 8003352:	f200 80a1 	bhi.w	8003498 <HAL_RCC_GetSysClockFreq+0x16c>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x34>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x3a>
 800335e:	e09b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003364:	e09b      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800336a:	e098      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800336c:	4b4f      	ldr	r3, [pc, #316]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	2200      	movs	r2, #0
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	627a      	str	r2, [r7, #36]	; 0x24
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003394:	2100      	movs	r1, #0
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003398:	fb03 f201 	mul.w	r2, r3, r1
 800339c:	2300      	movs	r3, #0
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a6:	fba0 1202 	umull	r1, r2, r0, r2
 80033aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ac:	460a      	mov	r2, r1
 80033ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80033b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b2:	4413      	add	r3, r2
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b8:	2200      	movs	r2, #0
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	61fa      	str	r2, [r7, #28]
 80033be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033c6:	f7fc ff7b 	bl	80002c0 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4613      	mov	r3, r2
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d2:	e053      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	2200      	movs	r2, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	617a      	str	r2, [r7, #20]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033e6:	f04f 0b00 	mov.w	fp, #0
 80033ea:	4652      	mov	r2, sl
 80033ec:	465b      	mov	r3, fp
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	0159      	lsls	r1, r3, #5
 80033f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033fc:	0150      	lsls	r0, r2, #5
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	ebb2 080a 	subs.w	r8, r2, sl
 8003406:	eb63 090b 	sbc.w	r9, r3, fp
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003416:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800341a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800341e:	ebb2 0408 	subs.w	r4, r2, r8
 8003422:	eb63 0509 	sbc.w	r5, r3, r9
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	00eb      	lsls	r3, r5, #3
 8003430:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003434:	00e2      	lsls	r2, r4, #3
 8003436:	4614      	mov	r4, r2
 8003438:	461d      	mov	r5, r3
 800343a:	eb14 030a 	adds.w	r3, r4, sl
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	eb45 030b 	adc.w	r3, r5, fp
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003452:	4629      	mov	r1, r5
 8003454:	028b      	lsls	r3, r1, #10
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345c:	4621      	mov	r1, r4
 800345e:	028a      	lsls	r2, r1, #10
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	2200      	movs	r2, #0
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	60fa      	str	r2, [r7, #12]
 800346c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003470:	f7fc ff26 	bl	80002c0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0x180>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800348c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3740      	adds	r7, #64	; 0x40
 80034a4:	46bd      	mov	sp, r7
 80034a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	00f42400 	.word	0x00f42400
 80034b4:	017d7840 	.word	0x017d7840

080034b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000010 	.word	0x20000010

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08006420 	.word	0x08006420

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	08006420 	.word	0x08006420

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d012      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003548:	4b69      	ldr	r3, [pc, #420]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a68      	ldr	r2, [pc, #416]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003552:	6093      	str	r3, [r2, #8]
 8003554:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355c:	4964      	ldr	r1, [pc, #400]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	4959      	ldr	r1, [pc, #356]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003598:	d101      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d017      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035b6:	4b4e      	ldr	r3, [pc, #312]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	494a      	ldr	r1, [pc, #296]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 808b 	beq.w	800371a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	6413      	str	r3, [r2, #64]	; 0x40
 8003610:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fe f9fc 	bl	8001a24 <HAL_GetTick>
 800362c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe f9f8 	bl	8001a24 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e357      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003642:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364e:	4b28      	ldr	r3, [pc, #160]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d035      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d02e      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003676:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003682:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d114      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f9c0 	bl	8001a24 <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe f9bc 	bl	8001a24 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e319      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d6:	d111      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	4901      	ldr	r1, [pc, #4]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
 80036ee:	e00b      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000
 80036f8:	0ffffcff 	.word	0x0ffffcff
 80036fc:	4baa      	ldr	r3, [pc, #680]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4aa9      	ldr	r2, [pc, #676]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003706:	6093      	str	r3, [r2, #8]
 8003708:	4ba7      	ldr	r3, [pc, #668]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	49a4      	ldr	r1, [pc, #656]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	4313      	orrs	r3, r2
 8003718:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372c:	4a9e      	ldr	r2, [pc, #632]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003732:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003736:	4b9c      	ldr	r3, [pc, #624]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003738:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	4999      	ldr	r1, [pc, #612]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003754:	4b94      	ldr	r3, [pc, #592]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003762:	4991      	ldr	r1, [pc, #580]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003776:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003784:	4988      	ldr	r1, [pc, #544]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003798:	4b83      	ldr	r3, [pc, #524]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	4980      	ldr	r1, [pc, #512]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037ba:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4977      	ldr	r1, [pc, #476]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037dc:	4b72      	ldr	r3, [pc, #456]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	496f      	ldr	r1, [pc, #444]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037fe:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f023 020c 	bic.w	r2, r3, #12
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	4966      	ldr	r1, [pc, #408]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003826:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	495e      	ldr	r1, [pc, #376]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003842:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	4955      	ldr	r1, [pc, #340]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003886:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	4944      	ldr	r1, [pc, #272]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a8:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	493c      	ldr	r1, [pc, #240]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d8:	4933      	ldr	r1, [pc, #204]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ec:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fa:	492b      	ldr	r1, [pc, #172]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d011      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391c:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800392c:	d101      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	4912      	ldr	r1, [pc, #72]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003980:	4909      	ldr	r1, [pc, #36]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d006      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80d9 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a01      	ldr	r2, [pc, #4]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039a6:	e001      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ae:	f7fe f839 	bl	8001a24 <HAL_GetTick>
 80039b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039b6:	f7fe f835 	bl	8001a24 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	; 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e194      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c8:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d021      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11d      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039e8:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039f6:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	019a      	lsls	r2, r3, #6
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	061b      	lsls	r3, r3, #24
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	071b      	lsls	r3, r3, #28
 8003a1c:	4957      	ldr	r1, [pc, #348]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02e      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4e:	d129      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a64:	0f1b      	lsrs	r3, r3, #28
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	019a      	lsls	r2, r3, #6
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	071b      	lsls	r3, r3, #28
 8003a84:	493d      	ldr	r1, [pc, #244]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a92:	f023 021f 	bic.w	r2, r3, #31
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	4937      	ldr	r1, [pc, #220]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01d      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	0e1b      	lsrs	r3, r3, #24
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac4:	0f1b      	lsrs	r3, r3, #28
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	019a      	lsls	r2, r3, #6
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	061b      	lsls	r3, r3, #24
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	071b      	lsls	r3, r3, #28
 8003ae4:	4925      	ldr	r1, [pc, #148]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d011      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	019a      	lsls	r2, r3, #6
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	041b      	lsls	r3, r3, #16
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	071b      	lsls	r3, r3, #28
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fd ff7c 	bl	8001a24 <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b30:	f7fd ff78 	bl	8001a24 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0d7      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 80cd 	bne.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b62:	f7fd ff5f 	bl	8001a24 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b6a:	f7fd ff5b 	bl	8001a24 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d903      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0ba      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b80:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8c:	d0ed      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02e      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d12a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bc4:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	0f1b      	lsrs	r3, r3, #28
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	4944      	ldr	r1, [pc, #272]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bf2:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	493d      	ldr	r1, [pc, #244]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d022      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c20:	d11d      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	0e1b      	lsrs	r3, r3, #24
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c30:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	0f1b      	lsrs	r3, r3, #28
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	071b      	lsls	r3, r3, #28
 8003c56:	4929      	ldr	r1, [pc, #164]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d028      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	019a      	lsls	r2, r3, #6
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	431a      	orrs	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	4917      	ldr	r1, [pc, #92]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4911      	ldr	r1, [pc, #68]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fd feac 	bl	8001a24 <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cd0:	f7fd fea8 	bl	8001a24 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e007      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d1ef      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800

08003d00 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01c      	b.n	8003d4c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	795b      	ldrb	r3, [r3, #5]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fc70 	bl	8001608 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0204 	orr.w	r2, r2, #4
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	791b      	ldrb	r3, [r3, #4]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e044      	b.n	8003df8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	795b      	ldrb	r3, [r3, #5]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d133      	bne.n	8003de6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d84:	f7fd fe4e 	bl	8001a24 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d8a:	e018      	b.n	8003dbe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003d8c:	f7fd fe4a 	bl	8001a24 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d911      	bls.n	8003dbe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d00a      	beq.n	8003dbe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e01c      	b.n	8003df8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d1df      	bne.n	8003d8c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	715a      	strb	r2, [r3, #5]
 8003de4:	e004      	b.n	8003df0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2204      	movs	r2, #4
 8003dea:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	711a      	strb	r2, [r3, #4]

  return status;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ffa0 	bl	8003d54 <HAL_RNG_GenerateRandomNumber>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	e000      	b.n	8003e22 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8003e20:	2300      	movs	r3, #0
  }
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e09d      	b.n	8003f78 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d108      	bne.n	8003e56 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4c:	d009      	beq.n	8003e62 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	61da      	str	r2, [r3, #28]
 8003e54:	e005      	b.n	8003e62 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fd fbf7 	bl	8001670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ea2:	d902      	bls.n	8003eaa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e002      	b.n	8003eb0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eb8:	d007      	beq.n	8003eca <HAL_SPI_Init+0xa0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	ea42 0103 	orr.w	r1, r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0204 	and.w	r2, r3, #4
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f46:	ea42 0103 	orr.w	r1, r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_SPI_Transmit_IT+0x20>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e072      	b.n	8004086 <HAL_SPI_Transmit_IT+0x106>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_Transmit_IT+0x34>
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fb8:	e060      	b.n	800407c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003fca:	e057      	b.n	800407c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2203      	movs	r2, #3
 8003fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004010:	d903      	bls.n	800401a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_SPI_Transmit_IT+0x114>)
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
 8004018:	e002      	b.n	8004020 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_SPI_Transmit_IT+0x118>)
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	d10f      	bne.n	800404a <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004058:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d008      	beq.n	800407a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e000      	b.n	800407c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800407a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004084:	7dfb      	ldrb	r3, [r7, #23]
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	08004335 	.word	0x08004335
 8004098:	080042ef 	.word	0x080042ef

0800409c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
    return;
 80040de:	e0d7      	b.n	8004290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_SPI_IRQHandler+0x66>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	09db      	lsrs	r3, r3, #7
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d004      	beq.n	8004102 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
    return;
 8004100:	e0c6      	b.n	8004290 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_SPI_IRQHandler+0x8c>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80b4 	beq.w	8004290 <HAL_SPI_IRQHandler+0x1f4>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80ad 	beq.w	8004290 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d023      	beq.n	800418a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b03      	cmp	r3, #3
 800414c:	d011      	beq.n	8004172 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e00b      	b.n	800418a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	693b      	ldr	r3, [r7, #16]
        return;
 8004188:	e082      	b.n	8004290 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d014      	beq.n	80041c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	f043 0208 	orr.w	r2, r3, #8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_SPI_IRQHandler+0x17e>
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d034      	beq.n	8004284 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0203 	bic.w	r2, r2, #3
 8004228:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	2b00      	cmp	r3, #0
 8004230:	d011      	beq.n	8004256 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_SPI_IRQHandler+0x1fc>)
 8004238:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fae3 	bl	800280a <HAL_DMA_Abort_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d016      	beq.n	800428c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <HAL_SPI_IRQHandler+0x1fc>)
 8004264:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe facd 	bl	800280a <HAL_DMA_Abort_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004282:	e003      	b.n	800428c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f813 	bl	80042b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800428a:	e000      	b.n	800428e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800428c:	bf00      	nop
    return;
 800428e:	bf00      	nop
  }
}
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	080042c5 	.word	0x080042c5

0800429c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff ffe5 	bl	80042b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f9ae 	bl	8004688 <SPI_CloseTx_ISR>
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f98c 	bl	8004688 <SPI_CloseTx_ISR>
  }
}
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004388:	f7fd fb4c 	bl	8001a24 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4413      	add	r3, r2
 8004396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004398:	f7fd fb44 	bl	8001a24 <HAL_GetTick>
 800439c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	015b      	lsls	r3, r3, #5
 80043a4:	0d1b      	lsrs	r3, r3, #20
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	e054      	b.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d050      	beq.n	800445a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b8:	f7fd fb34 	bl	8001a24 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d902      	bls.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d13d      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e6:	d111      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d004      	beq.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fa:	d107      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d10f      	bne.n	8004436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e017      	b.n	800447a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3b01      	subs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d19b      	bne.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000010 	.word	0x20000010

08004488 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800449a:	f7fd fac3 	bl	8001a24 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044aa:	f7fd fabb 	bl	8001a24 <HAL_GetTick>
 80044ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044b8:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00da      	lsls	r2, r3, #3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	0d1b      	lsrs	r3, r3, #20
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044d0:	e060      	b.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044d8:	d107      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d104      	bne.n	80044ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d050      	beq.n	8004594 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f2:	f7fd fa97 	bl	8001a24 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	429a      	cmp	r2, r3
 8004500:	d902      	bls.n	8004508 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d13d      	bne.n	8004584 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004516:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004520:	d111      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d004      	beq.n	8004536 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d107      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454e:	d10f      	bne.n	8004570 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e010      	b.n	80045a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3b01      	subs	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d196      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000010 	.word	0x20000010

080045b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff5b 	bl	8004488 <SPI_WaitFifoStateUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e046      	b.n	8004676 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <SPI_EndRxTxTransaction+0xcc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <SPI_EndRxTxTransaction+0xd0>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0d5b      	lsrs	r3, r3, #21
 80045f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004606:	d112      	bne.n	800462e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2200      	movs	r2, #0
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff feb0 	bl	8004378 <SPI_WaitFlagStateUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e023      	b.n	8004676 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	3b01      	subs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d0f2      	beq.n	800462e <SPI_EndRxTxTransaction+0x7a>
 8004648:	e000      	b.n	800464c <SPI_EndRxTxTransaction+0x98>
        break;
 800464a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff ff15 	bl	8004488 <SPI_WaitFifoStateUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e000      	b.n	8004676 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000010 	.word	0x20000010
 8004684:	165e9f81 	.word	0x165e9f81

08004688 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004690:	f7fd f9c8 	bl	8001a24 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046a4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	2164      	movs	r1, #100	; 0x64
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff82 	bl	80045b4 <SPI_EndRxTxTransaction>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7ff fddd 	bl	80042b0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80046f6:	e002      	b.n	80046fe <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff fdcf 	bl	800429c <HAL_SPI_TxCpltCallback>
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e049      	b.n	80047ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7fc ffeb 	bl	8001708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f000 fabf 	bl	8004cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d001      	beq.n	80047cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e054      	b.n	8004876 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d01d      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_TIM_Base_Start_IT+0xd4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <HAL_TIM_Base_Start_IT+0xd8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <HAL_TIM_Base_Start_IT+0xdc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1e      	ldr	r2, [pc, #120]	; (8004894 <HAL_TIM_Base_Start_IT+0xe0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_TIM_Base_Start_IT+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1b      	ldr	r2, [pc, #108]	; (800489c <HAL_TIM_Base_Start_IT+0xe8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d115      	bne.n	8004860 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_TIM_Base_Start_IT+0xec>)
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d015      	beq.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d011      	beq.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 0201 	orr.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	e008      	b.n	8004872 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e000      	b.n	8004874 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40010400 	.word	0x40010400
 8004898:	40014000 	.word	0x40014000
 800489c:	40001800 	.word	0x40001800
 80048a0:	00010007 	.word	0x00010007

080048a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0202 	mvn.w	r2, #2
 80048d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9d0 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f9c2 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9d3 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b04      	cmp	r3, #4
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0204 	mvn.w	r2, #4
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9a6 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f998 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9a9 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f97c 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f96e 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f97f 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d122      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d11b      	bne.n	80049fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0210 	mvn.w	r2, #16
 80049cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2208      	movs	r2, #8
 80049d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f952 	bl	8004c8c <HAL_TIM_IC_CaptureCallback>
 80049e8:	e005      	b.n	80049f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f944 	bl	8004c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f955 	bl	8004ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10e      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d107      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f06f 0201 	mvn.w	r2, #1
 8004a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fa6c 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fb0c 	bl	800506c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a62:	d10e      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d107      	bne.n	8004a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 faff 	bl	8005080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f903 	bl	8004cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0220 	mvn.w	r2, #32
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fabf 	bl	8005058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0b4      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0x186>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	4b56      	ldr	r3, [pc, #344]	; (8004c74 <HAL_TIM_ConfigClockSource+0x190>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b38:	d03e      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3e:	f200 8087 	bhi.w	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	f000 8086 	beq.w	8004c56 <HAL_TIM_ConfigClockSource+0x172>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4e:	d87f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b70      	cmp	r3, #112	; 0x70
 8004b52:	d01a      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0xa6>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d87b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b60      	cmp	r3, #96	; 0x60
 8004b5a:	d050      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x11a>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d877      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b50      	cmp	r3, #80	; 0x50
 8004b62:	d03c      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xfa>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d873      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d058      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x13a>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d86f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b30      	cmp	r3, #48	; 0x30
 8004b72:	d064      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d86b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d060      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d867      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d05c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d05a      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	e062      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f000 f9af 	bl	8004efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	609a      	str	r2, [r3, #8]
      break;
 8004bb6:	e04f      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f000 f998 	bl	8004efc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e03c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 f90c 	bl	8004e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2150      	movs	r1, #80	; 0x50
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f965 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e02c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 f92b 	bl	8004e66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2160      	movs	r1, #96	; 0x60
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f955 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e01c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 f8ec 	bl	8004e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2140      	movs	r1, #64	; 0x40
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f945 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 f93c 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 8004c4e:	e003      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	fffeff88 	.word	0xfffeff88

08004c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a40      	ldr	r2, [pc, #256]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d013      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce6:	d00f      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00b      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3b      	ldr	r2, [pc, #236]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_Base_SetConfig+0x40>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a3a      	ldr	r2, [pc, #232]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d108      	bne.n	8004d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d02b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d28:	d027      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <TIM_Base_SetConfig+0x118>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d023      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	; (8004de4 <TIM_Base_SetConfig+0x11c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <TIM_Base_SetConfig+0x120>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	; (8004df0 <TIM_Base_SetConfig+0x128>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <TIM_Base_SetConfig+0x12c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_Base_SetConfig+0x134>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a24      	ldr	r2, [pc, #144]	; (8004e00 <TIM_Base_SetConfig+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <TIM_Base_SetConfig+0x13c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <TIM_Base_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0xf8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a0c      	ldr	r2, [pc, #48]	; (8004dec <TIM_Base_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40014400 	.word	0x40014400
 8004df8:	40014800 	.word	0x40014800
 8004dfc:	40001800 	.word	0x40001800
 8004e00:	40001c00 	.word	0x40001c00
 8004e04:	40002000 	.word	0x40002000

08004e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 030a 	bic.w	r3, r3, #10
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0210 	bic.w	r2, r3, #16
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	031b      	lsls	r3, r3, #12
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f043 0307 	orr.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e06d      	b.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d022      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d01d      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a16      	ldr	r2, [pc, #88]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40000c00 	.word	0x40000c00
 8005050:	40014000 	.word	0x40014000
 8005054:	40001800 	.word	0x40001800

08005058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e040      	b.n	8005128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fb4c 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	; 0x24
 80050c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8c0 	bl	8005258 <UART_SetConfig>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e022      	b.n	8005128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fb18 	bl	8005720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb9f 	bl	8005864 <UART_CheckIdleState>
 8005126:	4603      	mov	r3, r0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005144:	2b20      	cmp	r3, #32
 8005146:	f040 8081 	bne.w	800524c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_UART_Transmit+0x26>
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e079      	b.n	800524e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_UART_Transmit+0x38>
 8005164:	2302      	movs	r3, #2
 8005166:	e072      	b.n	800524e <HAL_UART_Transmit+0x11e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2221      	movs	r2, #33	; 0x21
 800517c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517e:	f7fc fc51 	bl	8001a24 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d108      	bne.n	80051b0 <HAL_UART_Transmit+0x80>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e003      	b.n	80051b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051c0:	e02c      	b.n	800521c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2180      	movs	r1, #128	; 0x80
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fb7c 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e038      	b.n	800524e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	3302      	adds	r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e007      	b.n	800520a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1cc      	bne.n	80051c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fb49 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e005      	b.n	800524e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4ba6      	ldr	r3, [pc, #664]	; (800551c <UART_SetConfig+0x2c4>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6979      	ldr	r1, [r7, #20]
 800528c:	430b      	orrs	r3, r1
 800528e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a94      	ldr	r2, [pc, #592]	; (8005520 <UART_SetConfig+0x2c8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d120      	bne.n	8005316 <UART_SetConfig+0xbe>
 80052d4:	4b93      	ldr	r3, [pc, #588]	; (8005524 <UART_SetConfig+0x2cc>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d816      	bhi.n	8005310 <UART_SetConfig+0xb8>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <UART_SetConfig+0x90>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005305 	.word	0x08005305
 80052f0:	080052ff 	.word	0x080052ff
 80052f4:	0800530b 	.word	0x0800530b
 80052f8:	2301      	movs	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e150      	b.n	80055a0 <UART_SetConfig+0x348>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e14d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e14a      	b.n	80055a0 <UART_SetConfig+0x348>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e147      	b.n	80055a0 <UART_SetConfig+0x348>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e144      	b.n	80055a0 <UART_SetConfig+0x348>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a83      	ldr	r2, [pc, #524]	; (8005528 <UART_SetConfig+0x2d0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d132      	bne.n	8005386 <UART_SetConfig+0x12e>
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <UART_SetConfig+0x2cc>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 030c 	and.w	r3, r3, #12
 800532a:	2b0c      	cmp	r3, #12
 800532c:	d828      	bhi.n	8005380 <UART_SetConfig+0x128>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0xdc>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005369 	.word	0x08005369
 8005338:	08005381 	.word	0x08005381
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005375 	.word	0x08005375
 8005348:	08005381 	.word	0x08005381
 800534c:	08005381 	.word	0x08005381
 8005350:	08005381 	.word	0x08005381
 8005354:	0800536f 	.word	0x0800536f
 8005358:	08005381 	.word	0x08005381
 800535c:	08005381 	.word	0x08005381
 8005360:	08005381 	.word	0x08005381
 8005364:	0800537b 	.word	0x0800537b
 8005368:	2300      	movs	r3, #0
 800536a:	77fb      	strb	r3, [r7, #31]
 800536c:	e118      	b.n	80055a0 <UART_SetConfig+0x348>
 800536e:	2302      	movs	r3, #2
 8005370:	77fb      	strb	r3, [r7, #31]
 8005372:	e115      	b.n	80055a0 <UART_SetConfig+0x348>
 8005374:	2304      	movs	r3, #4
 8005376:	77fb      	strb	r3, [r7, #31]
 8005378:	e112      	b.n	80055a0 <UART_SetConfig+0x348>
 800537a:	2308      	movs	r3, #8
 800537c:	77fb      	strb	r3, [r7, #31]
 800537e:	e10f      	b.n	80055a0 <UART_SetConfig+0x348>
 8005380:	2310      	movs	r3, #16
 8005382:	77fb      	strb	r3, [r7, #31]
 8005384:	e10c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a68      	ldr	r2, [pc, #416]	; (800552c <UART_SetConfig+0x2d4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d120      	bne.n	80053d2 <UART_SetConfig+0x17a>
 8005390:	4b64      	ldr	r3, [pc, #400]	; (8005524 <UART_SetConfig+0x2cc>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d013      	beq.n	80053c6 <UART_SetConfig+0x16e>
 800539e:	2b30      	cmp	r3, #48	; 0x30
 80053a0:	d814      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d009      	beq.n	80053ba <UART_SetConfig+0x162>
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d810      	bhi.n	80053cc <UART_SetConfig+0x174>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <UART_SetConfig+0x15c>
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d006      	beq.n	80053c0 <UART_SetConfig+0x168>
 80053b2:	e00b      	b.n	80053cc <UART_SetConfig+0x174>
 80053b4:	2300      	movs	r3, #0
 80053b6:	77fb      	strb	r3, [r7, #31]
 80053b8:	e0f2      	b.n	80055a0 <UART_SetConfig+0x348>
 80053ba:	2302      	movs	r3, #2
 80053bc:	77fb      	strb	r3, [r7, #31]
 80053be:	e0ef      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c0:	2304      	movs	r3, #4
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e0ec      	b.n	80055a0 <UART_SetConfig+0x348>
 80053c6:	2308      	movs	r3, #8
 80053c8:	77fb      	strb	r3, [r7, #31]
 80053ca:	e0e9      	b.n	80055a0 <UART_SetConfig+0x348>
 80053cc:	2310      	movs	r3, #16
 80053ce:	77fb      	strb	r3, [r7, #31]
 80053d0:	e0e6      	b.n	80055a0 <UART_SetConfig+0x348>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <UART_SetConfig+0x2d8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d120      	bne.n	800541e <UART_SetConfig+0x1c6>
 80053dc:	4b51      	ldr	r3, [pc, #324]	; (8005524 <UART_SetConfig+0x2cc>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d013      	beq.n	8005412 <UART_SetConfig+0x1ba>
 80053ea:	2bc0      	cmp	r3, #192	; 0xc0
 80053ec:	d814      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x1ae>
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d810      	bhi.n	8005418 <UART_SetConfig+0x1c0>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <UART_SetConfig+0x1a8>
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d006      	beq.n	800540c <UART_SetConfig+0x1b4>
 80053fe:	e00b      	b.n	8005418 <UART_SetConfig+0x1c0>
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e0cc      	b.n	80055a0 <UART_SetConfig+0x348>
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e0c9      	b.n	80055a0 <UART_SetConfig+0x348>
 800540c:	2304      	movs	r3, #4
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e0c6      	b.n	80055a0 <UART_SetConfig+0x348>
 8005412:	2308      	movs	r3, #8
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e0c3      	b.n	80055a0 <UART_SetConfig+0x348>
 8005418:	2310      	movs	r3, #16
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e0c0      	b.n	80055a0 <UART_SetConfig+0x348>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a44      	ldr	r2, [pc, #272]	; (8005534 <UART_SetConfig+0x2dc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d125      	bne.n	8005474 <UART_SetConfig+0x21c>
 8005428:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <UART_SetConfig+0x2cc>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d017      	beq.n	8005468 <UART_SetConfig+0x210>
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d817      	bhi.n	800546e <UART_SetConfig+0x216>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005442:	d00b      	beq.n	800545c <UART_SetConfig+0x204>
 8005444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005448:	d811      	bhi.n	800546e <UART_SetConfig+0x216>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <UART_SetConfig+0x1fe>
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d006      	beq.n	8005462 <UART_SetConfig+0x20a>
 8005454:	e00b      	b.n	800546e <UART_SetConfig+0x216>
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0a1      	b.n	80055a0 <UART_SetConfig+0x348>
 800545c:	2302      	movs	r3, #2
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e09e      	b.n	80055a0 <UART_SetConfig+0x348>
 8005462:	2304      	movs	r3, #4
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e09b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005468:	2308      	movs	r3, #8
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e098      	b.n	80055a0 <UART_SetConfig+0x348>
 800546e:	2310      	movs	r3, #16
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e095      	b.n	80055a0 <UART_SetConfig+0x348>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <UART_SetConfig+0x2e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d125      	bne.n	80054ca <UART_SetConfig+0x272>
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <UART_SetConfig+0x2cc>)
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548c:	d017      	beq.n	80054be <UART_SetConfig+0x266>
 800548e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005492:	d817      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005498:	d00b      	beq.n	80054b2 <UART_SetConfig+0x25a>
 800549a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549e:	d811      	bhi.n	80054c4 <UART_SetConfig+0x26c>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <UART_SetConfig+0x254>
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x260>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x26c>
 80054ac:	2301      	movs	r3, #1
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e076      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b2:	2302      	movs	r3, #2
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e073      	b.n	80055a0 <UART_SetConfig+0x348>
 80054b8:	2304      	movs	r3, #4
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e070      	b.n	80055a0 <UART_SetConfig+0x348>
 80054be:	2308      	movs	r3, #8
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e06d      	b.n	80055a0 <UART_SetConfig+0x348>
 80054c4:	2310      	movs	r3, #16
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e06a      	b.n	80055a0 <UART_SetConfig+0x348>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <UART_SetConfig+0x2e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d138      	bne.n	8005546 <UART_SetConfig+0x2ee>
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <UART_SetConfig+0x2cc>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e2:	d017      	beq.n	8005514 <UART_SetConfig+0x2bc>
 80054e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e8:	d82a      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	d00b      	beq.n	8005508 <UART_SetConfig+0x2b0>
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d824      	bhi.n	8005540 <UART_SetConfig+0x2e8>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <UART_SetConfig+0x2aa>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d006      	beq.n	800550e <UART_SetConfig+0x2b6>
 8005500:	e01e      	b.n	8005540 <UART_SetConfig+0x2e8>
 8005502:	2300      	movs	r3, #0
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e04b      	b.n	80055a0 <UART_SetConfig+0x348>
 8005508:	2302      	movs	r3, #2
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e048      	b.n	80055a0 <UART_SetConfig+0x348>
 800550e:	2304      	movs	r3, #4
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e045      	b.n	80055a0 <UART_SetConfig+0x348>
 8005514:	2308      	movs	r3, #8
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e042      	b.n	80055a0 <UART_SetConfig+0x348>
 800551a:	bf00      	nop
 800551c:	efff69f3 	.word	0xefff69f3
 8005520:	40011000 	.word	0x40011000
 8005524:	40023800 	.word	0x40023800
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40007800 	.word	0x40007800
 8005540:	2310      	movs	r3, #16
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e02c      	b.n	80055a0 <UART_SetConfig+0x348>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a72      	ldr	r2, [pc, #456]	; (8005714 <UART_SetConfig+0x4bc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d125      	bne.n	800559c <UART_SetConfig+0x344>
 8005550:	4b71      	ldr	r3, [pc, #452]	; (8005718 <UART_SetConfig+0x4c0>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800555a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800555e:	d017      	beq.n	8005590 <UART_SetConfig+0x338>
 8005560:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005564:	d817      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d00b      	beq.n	8005584 <UART_SetConfig+0x32c>
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d811      	bhi.n	8005596 <UART_SetConfig+0x33e>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <UART_SetConfig+0x326>
 8005576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557a:	d006      	beq.n	800558a <UART_SetConfig+0x332>
 800557c:	e00b      	b.n	8005596 <UART_SetConfig+0x33e>
 800557e:	2300      	movs	r3, #0
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e00d      	b.n	80055a0 <UART_SetConfig+0x348>
 8005584:	2302      	movs	r3, #2
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e00a      	b.n	80055a0 <UART_SetConfig+0x348>
 800558a:	2304      	movs	r3, #4
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e007      	b.n	80055a0 <UART_SetConfig+0x348>
 8005590:	2308      	movs	r3, #8
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e004      	b.n	80055a0 <UART_SetConfig+0x348>
 8005596:	2310      	movs	r3, #16
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e001      	b.n	80055a0 <UART_SetConfig+0x348>
 800559c:	2310      	movs	r3, #16
 800559e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d15b      	bne.n	8005662 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d828      	bhi.n	8005602 <UART_SetConfig+0x3aa>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x360>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055e5 	.word	0x080055e5
 80055c0:	080055ed 	.word	0x080055ed
 80055c4:	08005603 	.word	0x08005603
 80055c8:	080055f3 	.word	0x080055f3
 80055cc:	08005603 	.word	0x08005603
 80055d0:	08005603 	.word	0x08005603
 80055d4:	08005603 	.word	0x08005603
 80055d8:	080055fb 	.word	0x080055fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fd ff78 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e013      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fd ff88 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 80055e8:	61b8      	str	r0, [r7, #24]
        break;
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <UART_SetConfig+0x4c4>)
 80055ee:	61bb      	str	r3, [r7, #24]
        break;
 80055f0:	e00c      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f2:	f7fd fe9b 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80055f6:	61b8      	str	r0, [r7, #24]
        break;
 80055f8:	e008      	b.n	800560c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e004      	b.n	800560c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	77bb      	strb	r3, [r7, #30]
        break;
 800560a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d074      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	005a      	lsls	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	fbb2 f3f3 	udiv	r3, r2, r3
 8005626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0f      	cmp	r3, #15
 800562c:	d916      	bls.n	800565c <UART_SetConfig+0x404>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005634:	d212      	bcs.n	800565c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f023 030f 	bic.w	r3, r3, #15
 800563e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b29b      	uxth	r3, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	b29a      	uxth	r2, r3
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	4313      	orrs	r3, r2
 8005650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	89fa      	ldrh	r2, [r7, #14]
 8005658:	60da      	str	r2, [r3, #12]
 800565a:	e04f      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	77bb      	strb	r3, [r7, #30]
 8005660:	e04c      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d828      	bhi.n	80056ba <UART_SetConfig+0x462>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0x418>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056ab 	.word	0x080056ab
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056bb 	.word	0x080056bb
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005694:	f7fd ff1c 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e013      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fd ff2c 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 80056a0:	61b8      	str	r0, [r7, #24]
        break;
 80056a2:	e00f      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <UART_SetConfig+0x4c4>)
 80056a6:	61bb      	str	r3, [r7, #24]
        break;
 80056a8:	e00c      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fd fe3f 	bl	800332c <HAL_RCC_GetSysClockFreq>
 80056ae:	61b8      	str	r0, [r7, #24]
        break;
 80056b0:	e008      	b.n	80056c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e004      	b.n	80056c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	77bb      	strb	r3, [r7, #30]
        break;
 80056c2:	bf00      	nop
    }

    if (pclk != 0U)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	085a      	lsrs	r2, r3, #1
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	441a      	add	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d909      	bls.n	80056f8 <UART_SetConfig+0x4a0>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ea:	d205      	bcs.n	80056f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	e001      	b.n	80056fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005708:	7fbb      	ldrb	r3, [r7, #30]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40007c00 	.word	0x40007c00
 8005718:	40023800 	.word	0x40023800
 800571c:	00f42400 	.word	0x00f42400

08005720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01a      	beq.n	8005836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d10a      	bne.n	8005836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005874:	f7fc f8d6 	bl	8001a24 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d10e      	bne.n	80058a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f817 	bl	80058ca <UART_WaitOnFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e00d      	b.n	80058c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b09c      	sub	sp, #112	; 0x70
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	e0a5      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	f000 80a1 	beq.w	8005a28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fc f89d 	bl	8001a24 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <UART_WaitOnFlagUntilTimeout+0x32>
 80058f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d13e      	bne.n	800597a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800590a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005910:	667b      	str	r3, [r7, #100]	; 0x64
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800591c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005920:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3308      	adds	r3, #8
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	f023 0301 	bic.w	r3, r3, #1
 8005944:	663b      	str	r3, [r7, #96]	; 0x60
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3308      	adds	r3, #8
 800594c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800594e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005950:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800595c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e067      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d04f      	beq.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005996:	d147      	bne.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e6      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	613b      	str	r3, [r7, #16]
   return(result);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059f4:	623a      	str	r2, [r7, #32]
 80059f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	69f9      	ldr	r1, [r7, #28]
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e010      	b.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4013      	ands	r3, r2
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	f43f af4a 	beq.w	80058dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3770      	adds	r7, #112	; 0x70
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000001c 	.word	0x2000001c

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4d0d      	ldr	r5, [pc, #52]	; (8005a98 <__libc_init_array+0x38>)
 8005a64:	4c0d      	ldr	r4, [pc, #52]	; (8005a9c <__libc_init_array+0x3c>)
 8005a66:	1b64      	subs	r4, r4, r5
 8005a68:	10a4      	asrs	r4, r4, #2
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	4d0b      	ldr	r5, [pc, #44]	; (8005aa0 <__libc_init_array+0x40>)
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <__libc_init_array+0x44>)
 8005a74:	f000 fca2 	bl	80063bc <_init>
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	2600      	movs	r6, #0
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	08006464 	.word	0x08006464
 8005a9c:	08006464 	.word	0x08006464
 8005aa0:	08006464 	.word	0x08006464
 8005aa4:	08006468 	.word	0x08006468

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <sniprintf>:
 8005ab8:	b40c      	push	{r2, r3}
 8005aba:	b530      	push	{r4, r5, lr}
 8005abc:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <sniprintf+0x64>)
 8005abe:	1e0c      	subs	r4, r1, #0
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	b09d      	sub	sp, #116	; 0x74
 8005ac4:	da08      	bge.n	8005ad8 <sniprintf+0x20>
 8005ac6:	238b      	movs	r3, #139	; 0x8b
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ace:	b01d      	add	sp, #116	; 0x74
 8005ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad4:	b002      	add	sp, #8
 8005ad6:	4770      	bx	lr
 8005ad8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005adc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ae0:	bf14      	ite	ne
 8005ae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ae6:	4623      	moveq	r3, r4
 8005ae8:	9304      	str	r3, [sp, #16]
 8005aea:	9307      	str	r3, [sp, #28]
 8005aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005af0:	9002      	str	r0, [sp, #8]
 8005af2:	9006      	str	r0, [sp, #24]
 8005af4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005af8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005afa:	ab21      	add	r3, sp, #132	; 0x84
 8005afc:	a902      	add	r1, sp, #8
 8005afe:	4628      	mov	r0, r5
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	f000 f869 	bl	8005bd8 <_svfiprintf_r>
 8005b06:	1c43      	adds	r3, r0, #1
 8005b08:	bfbc      	itt	lt
 8005b0a:	238b      	movlt	r3, #139	; 0x8b
 8005b0c:	602b      	strlt	r3, [r5, #0]
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	d0dd      	beq.n	8005ace <sniprintf+0x16>
 8005b12:	9b02      	ldr	r3, [sp, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e7d9      	b.n	8005ace <sniprintf+0x16>
 8005b1a:	bf00      	nop
 8005b1c:	2000001c 	.word	0x2000001c

08005b20 <__ssputs_r>:
 8005b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	688e      	ldr	r6, [r1, #8]
 8005b26:	429e      	cmp	r6, r3
 8005b28:	4682      	mov	sl, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4690      	mov	r8, r2
 8005b2e:	461f      	mov	r7, r3
 8005b30:	d838      	bhi.n	8005ba4 <__ssputs_r+0x84>
 8005b32:	898a      	ldrh	r2, [r1, #12]
 8005b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b38:	d032      	beq.n	8005ba0 <__ssputs_r+0x80>
 8005b3a:	6825      	ldr	r5, [r4, #0]
 8005b3c:	6909      	ldr	r1, [r1, #16]
 8005b3e:	eba5 0901 	sub.w	r9, r5, r1
 8005b42:	6965      	ldr	r5, [r4, #20]
 8005b44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	444b      	add	r3, r9
 8005b50:	106d      	asrs	r5, r5, #1
 8005b52:	429d      	cmp	r5, r3
 8005b54:	bf38      	it	cc
 8005b56:	461d      	movcc	r5, r3
 8005b58:	0553      	lsls	r3, r2, #21
 8005b5a:	d531      	bpl.n	8005bc0 <__ssputs_r+0xa0>
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f000 fb63 	bl	8006228 <_malloc_r>
 8005b62:	4606      	mov	r6, r0
 8005b64:	b950      	cbnz	r0, 8005b7c <__ssputs_r+0x5c>
 8005b66:	230c      	movs	r3, #12
 8005b68:	f8ca 3000 	str.w	r3, [sl]
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b7c:	6921      	ldr	r1, [r4, #16]
 8005b7e:	464a      	mov	r2, r9
 8005b80:	f000 fabe 	bl	8006100 <memcpy>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	6126      	str	r6, [r4, #16]
 8005b92:	6165      	str	r5, [r4, #20]
 8005b94:	444e      	add	r6, r9
 8005b96:	eba5 0509 	sub.w	r5, r5, r9
 8005b9a:	6026      	str	r6, [r4, #0]
 8005b9c:	60a5      	str	r5, [r4, #8]
 8005b9e:	463e      	mov	r6, r7
 8005ba0:	42be      	cmp	r6, r7
 8005ba2:	d900      	bls.n	8005ba6 <__ssputs_r+0x86>
 8005ba4:	463e      	mov	r6, r7
 8005ba6:	6820      	ldr	r0, [r4, #0]
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4641      	mov	r1, r8
 8005bac:	f000 fab6 	bl	800611c <memmove>
 8005bb0:	68a3      	ldr	r3, [r4, #8]
 8005bb2:	1b9b      	subs	r3, r3, r6
 8005bb4:	60a3      	str	r3, [r4, #8]
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	4433      	add	r3, r6
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	e7db      	b.n	8005b78 <__ssputs_r+0x58>
 8005bc0:	462a      	mov	r2, r5
 8005bc2:	f000 fba5 	bl	8006310 <_realloc_r>
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d1e1      	bne.n	8005b90 <__ssputs_r+0x70>
 8005bcc:	6921      	ldr	r1, [r4, #16]
 8005bce:	4650      	mov	r0, sl
 8005bd0:	f000 fabe 	bl	8006150 <_free_r>
 8005bd4:	e7c7      	b.n	8005b66 <__ssputs_r+0x46>
	...

08005bd8 <_svfiprintf_r>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	4698      	mov	r8, r3
 8005bde:	898b      	ldrh	r3, [r1, #12]
 8005be0:	061b      	lsls	r3, r3, #24
 8005be2:	b09d      	sub	sp, #116	; 0x74
 8005be4:	4607      	mov	r7, r0
 8005be6:	460d      	mov	r5, r1
 8005be8:	4614      	mov	r4, r2
 8005bea:	d50e      	bpl.n	8005c0a <_svfiprintf_r+0x32>
 8005bec:	690b      	ldr	r3, [r1, #16]
 8005bee:	b963      	cbnz	r3, 8005c0a <_svfiprintf_r+0x32>
 8005bf0:	2140      	movs	r1, #64	; 0x40
 8005bf2:	f000 fb19 	bl	8006228 <_malloc_r>
 8005bf6:	6028      	str	r0, [r5, #0]
 8005bf8:	6128      	str	r0, [r5, #16]
 8005bfa:	b920      	cbnz	r0, 8005c06 <_svfiprintf_r+0x2e>
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	603b      	str	r3, [r7, #0]
 8005c00:	f04f 30ff 	mov.w	r0, #4294967295
 8005c04:	e0d1      	b.n	8005daa <_svfiprintf_r+0x1d2>
 8005c06:	2340      	movs	r3, #64	; 0x40
 8005c08:	616b      	str	r3, [r5, #20]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0e:	2320      	movs	r3, #32
 8005c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c18:	2330      	movs	r3, #48	; 0x30
 8005c1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005dc4 <_svfiprintf_r+0x1ec>
 8005c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c22:	f04f 0901 	mov.w	r9, #1
 8005c26:	4623      	mov	r3, r4
 8005c28:	469a      	mov	sl, r3
 8005c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2e:	b10a      	cbz	r2, 8005c34 <_svfiprintf_r+0x5c>
 8005c30:	2a25      	cmp	r2, #37	; 0x25
 8005c32:	d1f9      	bne.n	8005c28 <_svfiprintf_r+0x50>
 8005c34:	ebba 0b04 	subs.w	fp, sl, r4
 8005c38:	d00b      	beq.n	8005c52 <_svfiprintf_r+0x7a>
 8005c3a:	465b      	mov	r3, fp
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ff6d 	bl	8005b20 <__ssputs_r>
 8005c46:	3001      	adds	r0, #1
 8005c48:	f000 80aa 	beq.w	8005da0 <_svfiprintf_r+0x1c8>
 8005c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c4e:	445a      	add	r2, fp
 8005c50:	9209      	str	r2, [sp, #36]	; 0x24
 8005c52:	f89a 3000 	ldrb.w	r3, [sl]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 80a2 	beq.w	8005da0 <_svfiprintf_r+0x1c8>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c66:	f10a 0a01 	add.w	sl, sl, #1
 8005c6a:	9304      	str	r3, [sp, #16]
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c72:	931a      	str	r3, [sp, #104]	; 0x68
 8005c74:	4654      	mov	r4, sl
 8005c76:	2205      	movs	r2, #5
 8005c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7c:	4851      	ldr	r0, [pc, #324]	; (8005dc4 <_svfiprintf_r+0x1ec>)
 8005c7e:	f7fa facf 	bl	8000220 <memchr>
 8005c82:	9a04      	ldr	r2, [sp, #16]
 8005c84:	b9d8      	cbnz	r0, 8005cbe <_svfiprintf_r+0xe6>
 8005c86:	06d0      	lsls	r0, r2, #27
 8005c88:	bf44      	itt	mi
 8005c8a:	2320      	movmi	r3, #32
 8005c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c90:	0711      	lsls	r1, r2, #28
 8005c92:	bf44      	itt	mi
 8005c94:	232b      	movmi	r3, #43	; 0x2b
 8005c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca0:	d015      	beq.n	8005cce <_svfiprintf_r+0xf6>
 8005ca2:	9a07      	ldr	r2, [sp, #28]
 8005ca4:	4654      	mov	r4, sl
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f04f 0c0a 	mov.w	ip, #10
 8005cac:	4621      	mov	r1, r4
 8005cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cb2:	3b30      	subs	r3, #48	; 0x30
 8005cb4:	2b09      	cmp	r3, #9
 8005cb6:	d94e      	bls.n	8005d56 <_svfiprintf_r+0x17e>
 8005cb8:	b1b0      	cbz	r0, 8005ce8 <_svfiprintf_r+0x110>
 8005cba:	9207      	str	r2, [sp, #28]
 8005cbc:	e014      	b.n	8005ce8 <_svfiprintf_r+0x110>
 8005cbe:	eba0 0308 	sub.w	r3, r0, r8
 8005cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	9304      	str	r3, [sp, #16]
 8005cca:	46a2      	mov	sl, r4
 8005ccc:	e7d2      	b.n	8005c74 <_svfiprintf_r+0x9c>
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	1d19      	adds	r1, r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	9103      	str	r1, [sp, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bfbb      	ittet	lt
 8005cda:	425b      	neglt	r3, r3
 8005cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8005ce0:	9307      	strge	r3, [sp, #28]
 8005ce2:	9307      	strlt	r3, [sp, #28]
 8005ce4:	bfb8      	it	lt
 8005ce6:	9204      	strlt	r2, [sp, #16]
 8005ce8:	7823      	ldrb	r3, [r4, #0]
 8005cea:	2b2e      	cmp	r3, #46	; 0x2e
 8005cec:	d10c      	bne.n	8005d08 <_svfiprintf_r+0x130>
 8005cee:	7863      	ldrb	r3, [r4, #1]
 8005cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf2:	d135      	bne.n	8005d60 <_svfiprintf_r+0x188>
 8005cf4:	9b03      	ldr	r3, [sp, #12]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	9203      	str	r2, [sp, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfb8      	it	lt
 8005d00:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d04:	3402      	adds	r4, #2
 8005d06:	9305      	str	r3, [sp, #20]
 8005d08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dd4 <_svfiprintf_r+0x1fc>
 8005d0c:	7821      	ldrb	r1, [r4, #0]
 8005d0e:	2203      	movs	r2, #3
 8005d10:	4650      	mov	r0, sl
 8005d12:	f7fa fa85 	bl	8000220 <memchr>
 8005d16:	b140      	cbz	r0, 8005d2a <_svfiprintf_r+0x152>
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	eba0 000a 	sub.w	r0, r0, sl
 8005d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	4303      	orrs	r3, r0
 8005d26:	3401      	adds	r4, #1
 8005d28:	9304      	str	r3, [sp, #16]
 8005d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d2e:	4826      	ldr	r0, [pc, #152]	; (8005dc8 <_svfiprintf_r+0x1f0>)
 8005d30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d34:	2206      	movs	r2, #6
 8005d36:	f7fa fa73 	bl	8000220 <memchr>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d038      	beq.n	8005db0 <_svfiprintf_r+0x1d8>
 8005d3e:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <_svfiprintf_r+0x1f4>)
 8005d40:	bb1b      	cbnz	r3, 8005d8a <_svfiprintf_r+0x1b2>
 8005d42:	9b03      	ldr	r3, [sp, #12]
 8005d44:	3307      	adds	r3, #7
 8005d46:	f023 0307 	bic.w	r3, r3, #7
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d50:	4433      	add	r3, r6
 8005d52:	9309      	str	r3, [sp, #36]	; 0x24
 8005d54:	e767      	b.n	8005c26 <_svfiprintf_r+0x4e>
 8005d56:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	e7a5      	b.n	8005cac <_svfiprintf_r+0xd4>
 8005d60:	2300      	movs	r3, #0
 8005d62:	3401      	adds	r4, #1
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	4619      	mov	r1, r3
 8005d68:	f04f 0c0a 	mov.w	ip, #10
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d72:	3a30      	subs	r2, #48	; 0x30
 8005d74:	2a09      	cmp	r2, #9
 8005d76:	d903      	bls.n	8005d80 <_svfiprintf_r+0x1a8>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0c5      	beq.n	8005d08 <_svfiprintf_r+0x130>
 8005d7c:	9105      	str	r1, [sp, #20]
 8005d7e:	e7c3      	b.n	8005d08 <_svfiprintf_r+0x130>
 8005d80:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d84:	4604      	mov	r4, r0
 8005d86:	2301      	movs	r3, #1
 8005d88:	e7f0      	b.n	8005d6c <_svfiprintf_r+0x194>
 8005d8a:	ab03      	add	r3, sp, #12
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <_svfiprintf_r+0x1f8>)
 8005d92:	a904      	add	r1, sp, #16
 8005d94:	4638      	mov	r0, r7
 8005d96:	f3af 8000 	nop.w
 8005d9a:	1c42      	adds	r2, r0, #1
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	d1d6      	bne.n	8005d4e <_svfiprintf_r+0x176>
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	065b      	lsls	r3, r3, #25
 8005da4:	f53f af2c 	bmi.w	8005c00 <_svfiprintf_r+0x28>
 8005da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005daa:	b01d      	add	sp, #116	; 0x74
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	ab03      	add	r3, sp, #12
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	462a      	mov	r2, r5
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <_svfiprintf_r+0x1f8>)
 8005db8:	a904      	add	r1, sp, #16
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f000 f87a 	bl	8005eb4 <_printf_i>
 8005dc0:	e7eb      	b.n	8005d9a <_svfiprintf_r+0x1c2>
 8005dc2:	bf00      	nop
 8005dc4:	08006428 	.word	0x08006428
 8005dc8:	08006432 	.word	0x08006432
 8005dcc:	00000000 	.word	0x00000000
 8005dd0:	08005b21 	.word	0x08005b21
 8005dd4:	0800642e 	.word	0x0800642e

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4699      	mov	r9, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bfb8      	it	lt
 8005dec:	4613      	movlt	r3, r2
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df4:	4607      	mov	r7, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc26      	bgt.n	8005e6e <_printf_common+0x96>
 8005e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e24:	1e13      	subs	r3, r2, #0
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d42b      	bmi.n	8005e88 <_printf_common+0xb0>
 8005e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d01e      	beq.n	8005e7c <_printf_common+0xa4>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	68e5      	ldr	r5, [r4, #12]
 8005e42:	6832      	ldr	r2, [r6, #0]
 8005e44:	f003 0306 	and.w	r3, r3, #6
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	bf08      	it	eq
 8005e4c:	1aad      	subeq	r5, r5, r2
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	bf0c      	ite	eq
 8005e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e58:	2500      	movne	r5, #0
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bfc4      	itt	gt
 8005e5e:	1a9b      	subgt	r3, r3, r2
 8005e60:	18ed      	addgt	r5, r5, r3
 8005e62:	2600      	movs	r6, #0
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xc8>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xa8>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4649      	mov	r1, r9
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c0      	blx	r8
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xac>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c6      	b.n	8005e16 <_printf_common+0x3e>
 8005e88:	18e1      	adds	r1, r4, r3
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	2030      	movs	r0, #48	; 0x30
 8005e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e92:	4422      	add	r2, r4
 8005e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	e7c7      	b.n	8005e30 <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa4>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x8e>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ebc:	2f78      	cmp	r7, #120	; 0x78
 8005ebe:	4691      	mov	r9, r2
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	; 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d8 	beq.w	8006086 <_printf_i+0x1d2>
 8005ed6:	2f58      	cmp	r7, #88	; 0x58
 8005ed8:	f000 80a3 	beq.w	8006022 <_printf_i+0x16e>
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	; (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	0800606d 	.word	0x0800606d
 8005f24:	08005f91 	.word	0x08005f91
 8005f28:	0800604f 	.word	0x0800604f
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	0800608f 	.word	0x0800608f
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006057 	.word	0x08006057
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0a3      	b.n	80060a8 <_printf_i+0x1f4>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	6829      	ldr	r1, [r5, #0]
 8005f64:	0606      	lsls	r6, r0, #24
 8005f66:	f101 0304 	add.w	r3, r1, #4
 8005f6a:	d50a      	bpl.n	8005f82 <_printf_i+0xce>
 8005f6c:	680e      	ldr	r6, [r1, #0]
 8005f6e:	602b      	str	r3, [r5, #0]
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	da03      	bge.n	8005f7c <_printf_i+0xc8>
 8005f74:	232d      	movs	r3, #45	; 0x2d
 8005f76:	4276      	negs	r6, r6
 8005f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f7c:	485e      	ldr	r0, [pc, #376]	; (80060f8 <_printf_i+0x244>)
 8005f7e:	230a      	movs	r3, #10
 8005f80:	e019      	b.n	8005fb6 <_printf_i+0x102>
 8005f82:	680e      	ldr	r6, [r1, #0]
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f8a:	bf18      	it	ne
 8005f8c:	b236      	sxthne	r6, r6
 8005f8e:	e7ef      	b.n	8005f70 <_printf_i+0xbc>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6820      	ldr	r0, [r4, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	6029      	str	r1, [r5, #0]
 8005f98:	0601      	lsls	r1, r0, #24
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0xec>
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0xf2>
 8005fa0:	0646      	lsls	r6, r0, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0xe8>
 8005fa4:	881e      	ldrh	r6, [r3, #0]
 8005fa6:	4854      	ldr	r0, [pc, #336]	; (80060f8 <_printf_i+0x244>)
 8005fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8005faa:	bf0c      	ite	eq
 8005fac:	2308      	moveq	r3, #8
 8005fae:	230a      	movne	r3, #10
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb6:	6865      	ldr	r5, [r4, #4]
 8005fb8:	60a5      	str	r5, [r4, #8]
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	bfa2      	ittt	ge
 8005fbe:	6821      	ldrge	r1, [r4, #0]
 8005fc0:	f021 0104 	bicge.w	r1, r1, #4
 8005fc4:	6021      	strge	r1, [r4, #0]
 8005fc6:	b90e      	cbnz	r6, 8005fcc <_printf_i+0x118>
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	d04d      	beq.n	8006068 <_printf_i+0x1b4>
 8005fcc:	4615      	mov	r5, r2
 8005fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8005fd6:	5dc7      	ldrb	r7, [r0, r7]
 8005fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fdc:	4637      	mov	r7, r6
 8005fde:	42bb      	cmp	r3, r7
 8005fe0:	460e      	mov	r6, r1
 8005fe2:	d9f4      	bls.n	8005fce <_printf_i+0x11a>
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d10b      	bne.n	8006000 <_printf_i+0x14c>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	07de      	lsls	r6, r3, #31
 8005fec:	d508      	bpl.n	8006000 <_printf_i+0x14c>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	6861      	ldr	r1, [r4, #4]
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	bfde      	ittt	le
 8005ff6:	2330      	movle	r3, #48	; 0x30
 8005ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006000:	1b52      	subs	r2, r2, r5
 8006002:	6122      	str	r2, [r4, #16]
 8006004:	f8cd a000 	str.w	sl, [sp]
 8006008:	464b      	mov	r3, r9
 800600a:	aa03      	add	r2, sp, #12
 800600c:	4621      	mov	r1, r4
 800600e:	4640      	mov	r0, r8
 8006010:	f7ff fee2 	bl	8005dd8 <_printf_common>
 8006014:	3001      	adds	r0, #1
 8006016:	d14c      	bne.n	80060b2 <_printf_i+0x1fe>
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	b004      	add	sp, #16
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	4835      	ldr	r0, [pc, #212]	; (80060f8 <_printf_i+0x244>)
 8006024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006028:	6829      	ldr	r1, [r5, #0]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006030:	6029      	str	r1, [r5, #0]
 8006032:	061d      	lsls	r5, r3, #24
 8006034:	d514      	bpl.n	8006060 <_printf_i+0x1ac>
 8006036:	07df      	lsls	r7, r3, #31
 8006038:	bf44      	itt	mi
 800603a:	f043 0320 	orrmi.w	r3, r3, #32
 800603e:	6023      	strmi	r3, [r4, #0]
 8006040:	b91e      	cbnz	r6, 800604a <_printf_i+0x196>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	f023 0320 	bic.w	r3, r3, #32
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	2310      	movs	r3, #16
 800604c:	e7b0      	b.n	8005fb0 <_printf_i+0xfc>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f043 0320 	orr.w	r3, r3, #32
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	2378      	movs	r3, #120	; 0x78
 8006058:	4828      	ldr	r0, [pc, #160]	; (80060fc <_printf_i+0x248>)
 800605a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800605e:	e7e3      	b.n	8006028 <_printf_i+0x174>
 8006060:	0659      	lsls	r1, r3, #25
 8006062:	bf48      	it	mi
 8006064:	b2b6      	uxthmi	r6, r6
 8006066:	e7e6      	b.n	8006036 <_printf_i+0x182>
 8006068:	4615      	mov	r5, r2
 800606a:	e7bb      	b.n	8005fe4 <_printf_i+0x130>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	6826      	ldr	r6, [r4, #0]
 8006070:	6961      	ldr	r1, [r4, #20]
 8006072:	1d18      	adds	r0, r3, #4
 8006074:	6028      	str	r0, [r5, #0]
 8006076:	0635      	lsls	r5, r6, #24
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	d501      	bpl.n	8006080 <_printf_i+0x1cc>
 800607c:	6019      	str	r1, [r3, #0]
 800607e:	e002      	b.n	8006086 <_printf_i+0x1d2>
 8006080:	0670      	lsls	r0, r6, #25
 8006082:	d5fb      	bpl.n	800607c <_printf_i+0x1c8>
 8006084:	8019      	strh	r1, [r3, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	4615      	mov	r5, r2
 800608c:	e7ba      	b.n	8006004 <_printf_i+0x150>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	602a      	str	r2, [r5, #0]
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	6862      	ldr	r2, [r4, #4]
 8006098:	2100      	movs	r1, #0
 800609a:	4628      	mov	r0, r5
 800609c:	f7fa f8c0 	bl	8000220 <memchr>
 80060a0:	b108      	cbz	r0, 80060a6 <_printf_i+0x1f2>
 80060a2:	1b40      	subs	r0, r0, r5
 80060a4:	6060      	str	r0, [r4, #4]
 80060a6:	6863      	ldr	r3, [r4, #4]
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	2300      	movs	r3, #0
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b0:	e7a8      	b.n	8006004 <_printf_i+0x150>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	462a      	mov	r2, r5
 80060b6:	4649      	mov	r1, r9
 80060b8:	4640      	mov	r0, r8
 80060ba:	47d0      	blx	sl
 80060bc:	3001      	adds	r0, #1
 80060be:	d0ab      	beq.n	8006018 <_printf_i+0x164>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	079b      	lsls	r3, r3, #30
 80060c4:	d413      	bmi.n	80060ee <_printf_i+0x23a>
 80060c6:	68e0      	ldr	r0, [r4, #12]
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	4298      	cmp	r0, r3
 80060cc:	bfb8      	it	lt
 80060ce:	4618      	movlt	r0, r3
 80060d0:	e7a4      	b.n	800601c <_printf_i+0x168>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4632      	mov	r2, r6
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d09b      	beq.n	8006018 <_printf_i+0x164>
 80060e0:	3501      	adds	r5, #1
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	9903      	ldr	r1, [sp, #12]
 80060e6:	1a5b      	subs	r3, r3, r1
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dcf2      	bgt.n	80060d2 <_printf_i+0x21e>
 80060ec:	e7eb      	b.n	80060c6 <_printf_i+0x212>
 80060ee:	2500      	movs	r5, #0
 80060f0:	f104 0619 	add.w	r6, r4, #25
 80060f4:	e7f5      	b.n	80060e2 <_printf_i+0x22e>
 80060f6:	bf00      	nop
 80060f8:	08006439 	.word	0x08006439
 80060fc:	0800644a 	.word	0x0800644a

08006100 <memcpy>:
 8006100:	440a      	add	r2, r1
 8006102:	4291      	cmp	r1, r2
 8006104:	f100 33ff 	add.w	r3, r0, #4294967295
 8006108:	d100      	bne.n	800610c <memcpy+0xc>
 800610a:	4770      	bx	lr
 800610c:	b510      	push	{r4, lr}
 800610e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006116:	4291      	cmp	r1, r2
 8006118:	d1f9      	bne.n	800610e <memcpy+0xe>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memmove>:
 800611c:	4288      	cmp	r0, r1
 800611e:	b510      	push	{r4, lr}
 8006120:	eb01 0402 	add.w	r4, r1, r2
 8006124:	d902      	bls.n	800612c <memmove+0x10>
 8006126:	4284      	cmp	r4, r0
 8006128:	4623      	mov	r3, r4
 800612a:	d807      	bhi.n	800613c <memmove+0x20>
 800612c:	1e43      	subs	r3, r0, #1
 800612e:	42a1      	cmp	r1, r4
 8006130:	d008      	beq.n	8006144 <memmove+0x28>
 8006132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800613a:	e7f8      	b.n	800612e <memmove+0x12>
 800613c:	4402      	add	r2, r0
 800613e:	4601      	mov	r1, r0
 8006140:	428a      	cmp	r2, r1
 8006142:	d100      	bne.n	8006146 <memmove+0x2a>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800614e:	e7f7      	b.n	8006140 <memmove+0x24>

08006150 <_free_r>:
 8006150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006152:	2900      	cmp	r1, #0
 8006154:	d044      	beq.n	80061e0 <_free_r+0x90>
 8006156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615a:	9001      	str	r0, [sp, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f1a1 0404 	sub.w	r4, r1, #4
 8006162:	bfb8      	it	lt
 8006164:	18e4      	addlt	r4, r4, r3
 8006166:	f000 f913 	bl	8006390 <__malloc_lock>
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <_free_r+0x94>)
 800616c:	9801      	ldr	r0, [sp, #4]
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	b933      	cbnz	r3, 8006180 <_free_r+0x30>
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	6014      	str	r4, [r2, #0]
 8006176:	b003      	add	sp, #12
 8006178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800617c:	f000 b90e 	b.w	800639c <__malloc_unlock>
 8006180:	42a3      	cmp	r3, r4
 8006182:	d908      	bls.n	8006196 <_free_r+0x46>
 8006184:	6825      	ldr	r5, [r4, #0]
 8006186:	1961      	adds	r1, r4, r5
 8006188:	428b      	cmp	r3, r1
 800618a:	bf01      	itttt	eq
 800618c:	6819      	ldreq	r1, [r3, #0]
 800618e:	685b      	ldreq	r3, [r3, #4]
 8006190:	1949      	addeq	r1, r1, r5
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	e7ed      	b.n	8006172 <_free_r+0x22>
 8006196:	461a      	mov	r2, r3
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b10b      	cbz	r3, 80061a0 <_free_r+0x50>
 800619c:	42a3      	cmp	r3, r4
 800619e:	d9fa      	bls.n	8006196 <_free_r+0x46>
 80061a0:	6811      	ldr	r1, [r2, #0]
 80061a2:	1855      	adds	r5, r2, r1
 80061a4:	42a5      	cmp	r5, r4
 80061a6:	d10b      	bne.n	80061c0 <_free_r+0x70>
 80061a8:	6824      	ldr	r4, [r4, #0]
 80061aa:	4421      	add	r1, r4
 80061ac:	1854      	adds	r4, r2, r1
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	d1e0      	bne.n	8006176 <_free_r+0x26>
 80061b4:	681c      	ldr	r4, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	6053      	str	r3, [r2, #4]
 80061ba:	4421      	add	r1, r4
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	e7da      	b.n	8006176 <_free_r+0x26>
 80061c0:	d902      	bls.n	80061c8 <_free_r+0x78>
 80061c2:	230c      	movs	r3, #12
 80061c4:	6003      	str	r3, [r0, #0]
 80061c6:	e7d6      	b.n	8006176 <_free_r+0x26>
 80061c8:	6825      	ldr	r5, [r4, #0]
 80061ca:	1961      	adds	r1, r4, r5
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf04      	itt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	bf04      	itt	eq
 80061d8:	1949      	addeq	r1, r1, r5
 80061da:	6021      	streq	r1, [r4, #0]
 80061dc:	6054      	str	r4, [r2, #4]
 80061de:	e7ca      	b.n	8006176 <_free_r+0x26>
 80061e0:	b003      	add	sp, #12
 80061e2:	bd30      	pop	{r4, r5, pc}
 80061e4:	20000290 	.word	0x20000290

080061e8 <sbrk_aligned>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4e0e      	ldr	r6, [pc, #56]	; (8006224 <sbrk_aligned+0x3c>)
 80061ec:	460c      	mov	r4, r1
 80061ee:	6831      	ldr	r1, [r6, #0]
 80061f0:	4605      	mov	r5, r0
 80061f2:	b911      	cbnz	r1, 80061fa <sbrk_aligned+0x12>
 80061f4:	f000 f8bc 	bl	8006370 <_sbrk_r>
 80061f8:	6030      	str	r0, [r6, #0]
 80061fa:	4621      	mov	r1, r4
 80061fc:	4628      	mov	r0, r5
 80061fe:	f000 f8b7 	bl	8006370 <_sbrk_r>
 8006202:	1c43      	adds	r3, r0, #1
 8006204:	d00a      	beq.n	800621c <sbrk_aligned+0x34>
 8006206:	1cc4      	adds	r4, r0, #3
 8006208:	f024 0403 	bic.w	r4, r4, #3
 800620c:	42a0      	cmp	r0, r4
 800620e:	d007      	beq.n	8006220 <sbrk_aligned+0x38>
 8006210:	1a21      	subs	r1, r4, r0
 8006212:	4628      	mov	r0, r5
 8006214:	f000 f8ac 	bl	8006370 <_sbrk_r>
 8006218:	3001      	adds	r0, #1
 800621a:	d101      	bne.n	8006220 <sbrk_aligned+0x38>
 800621c:	f04f 34ff 	mov.w	r4, #4294967295
 8006220:	4620      	mov	r0, r4
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	20000294 	.word	0x20000294

08006228 <_malloc_r>:
 8006228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800622c:	1ccd      	adds	r5, r1, #3
 800622e:	f025 0503 	bic.w	r5, r5, #3
 8006232:	3508      	adds	r5, #8
 8006234:	2d0c      	cmp	r5, #12
 8006236:	bf38      	it	cc
 8006238:	250c      	movcc	r5, #12
 800623a:	2d00      	cmp	r5, #0
 800623c:	4607      	mov	r7, r0
 800623e:	db01      	blt.n	8006244 <_malloc_r+0x1c>
 8006240:	42a9      	cmp	r1, r5
 8006242:	d905      	bls.n	8006250 <_malloc_r+0x28>
 8006244:	230c      	movs	r3, #12
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	2600      	movs	r6, #0
 800624a:	4630      	mov	r0, r6
 800624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006250:	4e2e      	ldr	r6, [pc, #184]	; (800630c <_malloc_r+0xe4>)
 8006252:	f000 f89d 	bl	8006390 <__malloc_lock>
 8006256:	6833      	ldr	r3, [r6, #0]
 8006258:	461c      	mov	r4, r3
 800625a:	bb34      	cbnz	r4, 80062aa <_malloc_r+0x82>
 800625c:	4629      	mov	r1, r5
 800625e:	4638      	mov	r0, r7
 8006260:	f7ff ffc2 	bl	80061e8 <sbrk_aligned>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	4604      	mov	r4, r0
 8006268:	d14d      	bne.n	8006306 <_malloc_r+0xde>
 800626a:	6834      	ldr	r4, [r6, #0]
 800626c:	4626      	mov	r6, r4
 800626e:	2e00      	cmp	r6, #0
 8006270:	d140      	bne.n	80062f4 <_malloc_r+0xcc>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	4631      	mov	r1, r6
 8006276:	4638      	mov	r0, r7
 8006278:	eb04 0803 	add.w	r8, r4, r3
 800627c:	f000 f878 	bl	8006370 <_sbrk_r>
 8006280:	4580      	cmp	r8, r0
 8006282:	d13a      	bne.n	80062fa <_malloc_r+0xd2>
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	3503      	adds	r5, #3
 8006288:	1a6d      	subs	r5, r5, r1
 800628a:	f025 0503 	bic.w	r5, r5, #3
 800628e:	3508      	adds	r5, #8
 8006290:	2d0c      	cmp	r5, #12
 8006292:	bf38      	it	cc
 8006294:	250c      	movcc	r5, #12
 8006296:	4629      	mov	r1, r5
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ffa5 	bl	80061e8 <sbrk_aligned>
 800629e:	3001      	adds	r0, #1
 80062a0:	d02b      	beq.n	80062fa <_malloc_r+0xd2>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	442b      	add	r3, r5
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	e00e      	b.n	80062c8 <_malloc_r+0xa0>
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	1b52      	subs	r2, r2, r5
 80062ae:	d41e      	bmi.n	80062ee <_malloc_r+0xc6>
 80062b0:	2a0b      	cmp	r2, #11
 80062b2:	d916      	bls.n	80062e2 <_malloc_r+0xba>
 80062b4:	1961      	adds	r1, r4, r5
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	6025      	str	r5, [r4, #0]
 80062ba:	bf18      	it	ne
 80062bc:	6059      	strne	r1, [r3, #4]
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	bf08      	it	eq
 80062c2:	6031      	streq	r1, [r6, #0]
 80062c4:	5162      	str	r2, [r4, r5]
 80062c6:	604b      	str	r3, [r1, #4]
 80062c8:	4638      	mov	r0, r7
 80062ca:	f104 060b 	add.w	r6, r4, #11
 80062ce:	f000 f865 	bl	800639c <__malloc_unlock>
 80062d2:	f026 0607 	bic.w	r6, r6, #7
 80062d6:	1d23      	adds	r3, r4, #4
 80062d8:	1af2      	subs	r2, r6, r3
 80062da:	d0b6      	beq.n	800624a <_malloc_r+0x22>
 80062dc:	1b9b      	subs	r3, r3, r6
 80062de:	50a3      	str	r3, [r4, r2]
 80062e0:	e7b3      	b.n	800624a <_malloc_r+0x22>
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	bf0c      	ite	eq
 80062e8:	6032      	streq	r2, [r6, #0]
 80062ea:	605a      	strne	r2, [r3, #4]
 80062ec:	e7ec      	b.n	80062c8 <_malloc_r+0xa0>
 80062ee:	4623      	mov	r3, r4
 80062f0:	6864      	ldr	r4, [r4, #4]
 80062f2:	e7b2      	b.n	800625a <_malloc_r+0x32>
 80062f4:	4634      	mov	r4, r6
 80062f6:	6876      	ldr	r6, [r6, #4]
 80062f8:	e7b9      	b.n	800626e <_malloc_r+0x46>
 80062fa:	230c      	movs	r3, #12
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4638      	mov	r0, r7
 8006300:	f000 f84c 	bl	800639c <__malloc_unlock>
 8006304:	e7a1      	b.n	800624a <_malloc_r+0x22>
 8006306:	6025      	str	r5, [r4, #0]
 8006308:	e7de      	b.n	80062c8 <_malloc_r+0xa0>
 800630a:	bf00      	nop
 800630c:	20000290 	.word	0x20000290

08006310 <_realloc_r>:
 8006310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006314:	4680      	mov	r8, r0
 8006316:	4614      	mov	r4, r2
 8006318:	460e      	mov	r6, r1
 800631a:	b921      	cbnz	r1, 8006326 <_realloc_r+0x16>
 800631c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	4611      	mov	r1, r2
 8006322:	f7ff bf81 	b.w	8006228 <_malloc_r>
 8006326:	b92a      	cbnz	r2, 8006334 <_realloc_r+0x24>
 8006328:	f7ff ff12 	bl	8006150 <_free_r>
 800632c:	4625      	mov	r5, r4
 800632e:	4628      	mov	r0, r5
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	f000 f838 	bl	80063a8 <_malloc_usable_size_r>
 8006338:	4284      	cmp	r4, r0
 800633a:	4607      	mov	r7, r0
 800633c:	d802      	bhi.n	8006344 <_realloc_r+0x34>
 800633e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006342:	d812      	bhi.n	800636a <_realloc_r+0x5a>
 8006344:	4621      	mov	r1, r4
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff ff6e 	bl	8006228 <_malloc_r>
 800634c:	4605      	mov	r5, r0
 800634e:	2800      	cmp	r0, #0
 8006350:	d0ed      	beq.n	800632e <_realloc_r+0x1e>
 8006352:	42bc      	cmp	r4, r7
 8006354:	4622      	mov	r2, r4
 8006356:	4631      	mov	r1, r6
 8006358:	bf28      	it	cs
 800635a:	463a      	movcs	r2, r7
 800635c:	f7ff fed0 	bl	8006100 <memcpy>
 8006360:	4631      	mov	r1, r6
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff fef4 	bl	8006150 <_free_r>
 8006368:	e7e1      	b.n	800632e <_realloc_r+0x1e>
 800636a:	4635      	mov	r5, r6
 800636c:	e7df      	b.n	800632e <_realloc_r+0x1e>
	...

08006370 <_sbrk_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d06      	ldr	r5, [pc, #24]	; (800638c <_sbrk_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fb fa90 	bl	80018a0 <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_sbrk_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_sbrk_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000298 	.word	0x20000298

08006390 <__malloc_lock>:
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__malloc_lock+0x8>)
 8006392:	f000 b811 	b.w	80063b8 <__retarget_lock_acquire_recursive>
 8006396:	bf00      	nop
 8006398:	2000029c 	.word	0x2000029c

0800639c <__malloc_unlock>:
 800639c:	4801      	ldr	r0, [pc, #4]	; (80063a4 <__malloc_unlock+0x8>)
 800639e:	f000 b80c 	b.w	80063ba <__retarget_lock_release_recursive>
 80063a2:	bf00      	nop
 80063a4:	2000029c 	.word	0x2000029c

080063a8 <_malloc_usable_size_r>:
 80063a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ac:	1f18      	subs	r0, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfbc      	itt	lt
 80063b2:	580b      	ldrlt	r3, [r1, r0]
 80063b4:	18c0      	addlt	r0, r0, r3
 80063b6:	4770      	bx	lr

080063b8 <__retarget_lock_acquire_recursive>:
 80063b8:	4770      	bx	lr

080063ba <__retarget_lock_release_recursive>:
 80063ba:	4770      	bx	lr

080063bc <_init>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr

080063c8 <_fini>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	bf00      	nop
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr
